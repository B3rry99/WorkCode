# -*- coding: utf-8 -*-
"""
Created on Tue Feb 13 10:04:27 2024

@author: jack.berry
"""
#%%
# IMPORTS
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import linregress
import os
from docx import Document
from docx.shared import Inches
import tkinter as tk
from tkinter import filedialog
import seaborn as sns
import pyodbc
from tkcalendar import Calendar 
import difflib
from docx.shared import Pt
from docx.shared import RGBColor
import requests
from io import BytesIO
import warnings
from PIL import Image, ImageTk
import calendar
from docx.oxml.ns import nsdecls
from docx.oxml import parse_xml
from docx.enum.text import WD_COLOR_INDEX
import tkinter.filedialog
import sys
import matplotlib.ticker as ticker
import datetime
from datetime import timedelta
from tkinter import messagebox
import getpass
#%%  FUNCTIONS

def update_label():
    if MPANCheck==True and MPRNCheck==True:
        if ExcelImportCheck == True:
            LoadData.config(text="Retrieving data \n(window may stop responding for ~1 minute)")
            root.update()  
            loaddata()
        else:
            messagebox.showinfo("Error", "Please import Excel input file")
    elif MPANCheck==True and GasExcelCheck==True:
        if ExcelImportCheck == True:
            LoadData.config(text="Retrieving data \n(window may stop responding for ~1 minute)")
            root.update()  
            loaddata()
        else:
            messagebox.showinfo("Error", "Please import Excel input file")
    elif MPANCheck==True and NoGasCheck==True:
        if ExcelImportCheck == True:
            LoadData.config(text="Retrieving data \n(window may stop responding for ~1 minute)")
            root.update()  
            loaddata()
        else:
            messagebox.showinfo("Error", "Please import Excel input file")
    elif ElecExcelCheck==True and MPRNCheck==True:
        if ExcelImportCheck == True:
            LoadData.config(text="Retrieving data \n(window may stop responding for ~1 minute)")
            root.update()  
            loaddata()
        else:
            messagebox.showinfo("Error", "Please import Excel input file")
    elif ElecExcelCheck==True and GasExcelCheck==True:
        if ExcelImportCheck == True:
            LoadData.config(text="Retrieving data \n(window may stop responding for ~1 minute)")
            root.update()  
            loaddata()
        else:
            messagebox.showinfo("Error", "Please import Excel input file")
    elif ElecExcelCheck==True and NoGasCheck==True:
        if ExcelImportCheck == True:
            LoadData.config(text="Retrieving data \n(window may stop responding for ~1 minute)")
            root.update()  
            loaddata()
        else:
            messagebox.showinfo("Error", "Please import Excel input file")
    else:
        messagebox.showinfo("Error", "Please select at least 2 checkboxes in the '3. Data Parameters' section")

def MPRNbox():
    checkbox2.config(state="normal")
    checkbox3.config(state="normal")
    checkbox4.config(state="normal")
    checkbox6.config(state="normal")
    checkbox7.config(state="normal")
    checkbox10.config(state="normal")
    MPRNexcel.deselect()
    NoGas.deselect()
    if pd.isna(df_Production.iloc[0,1]) == True:
        checkbox3.config(state="disabled")
        checkbox4.config(state="disabled")
        checkbox5.config(state="disabled")
        checkbox3.deselect()
        checkbox4.deselect()
        checkbox5.deselect()
    entry4.config(state='normal')
    Enter4.config(state='normal')

def gasexcel():
    global GasExcelCheck
    checkbox2.config(state="normal")
    checkbox3.config(state="normal")
    checkbox4.config(state="normal")
    checkbox6.config(state="normal")
    checkbox7.config(state="normal")
    checkbox10.config(state="normal")
    NoGas.deselect()
    MPRNcheckbox.deselect()
    GasExcelCheck = True
    if pd.isna(df_Production.iloc[0,1]) == True:
        checkbox3.config(state="disabled")
        checkbox4.config(state="disabled")
        checkbox5.config(state="disabled")
        checkbox3.deselect()
        checkbox4.deselect()
        checkbox5.deselect()
    MPRNcheckbox.deselect()
    NoGas.deselect()
    
def MPANbox():
    global MPANexcel
    checkbox11.config(state="normal")
    checkbox13.config(state="normal")
    NoElec.deselect()

    entry3.config(state='normal')
    Enter3.config(state='normal')
    
def select_all():
    for checkbox in checkboxes:
        if not checkbox['state'] == 'disabled':
            checkbox.select() 

def choose_date1():
    def print_selected_date1():
        global StartDate
        global EndDate
        global DateCheck
        selected_date = cal.selection_get()
        selected_date2 = selected_date + timedelta(days=364)
        EndDate = str(selected_date2)
        StartDate = str(selected_date)
        if is_in_last_year(selected_date) == True:
            choose_date_button1.config(text=StartDate, fg="red")
            DateLabel2 = tk.Label(root, text="Date selected needs to \nbe at least 1 year ago",width=20,height=2)
            canvas1.create_window(545, 60,anchor="nw", window=DateLabel2)
        elif is_recent(selected_date, datetime.date.today()) == True:
            choose_date_button1.config(text=StartDate, fg="red")
            DateLabel2 = tk.Label(root, text="Date selected needs to \nbe at least 1 year ago",width=20,height=2)
            canvas1.create_window(545, 60,anchor="nw", window=DateLabel2)
        else:
            DateCheck = True
            choose_date_button1.config(text=StartDate, fg="green")
            DateLabel = tk.Label(root, text=StartDate +" to "+ EndDate,width=20,height=2)
            canvas1.create_window(545, 60,anchor="nw", window=DateLabel)
        top1.destroy()
    global StartDate
    global EndDate
    top1 = tk.Toplevel(root)
    cal = Calendar(top1, selectmode="day", date_pattern="yyyy-mm-dd")
    cal.pack()
    def is_in_last_year(date_to_check):
        current_date = datetime.date.today()
        one_year_ago = current_date - datetime.timedelta(days=365)
        return one_year_ago <= date_to_check <= current_date
    def is_recent(date1, date2):
        return date1 > date2
    ok_button = tk.Button(top1, text="OK", command=print_selected_date1)
    ok_button.pack()

def get_input3():
    global MPAN
    global Name
    global MPANS
    global CompanyName
    global MPANCheck
    MPANS=[]
    MPAN = entry3.get()
    if "/" in MPAN:
        MPANS = MPAN.split("/")
        conn=pyodbc.connect(r'Driver={SQL Server}; Server=; UID=DataViewer;PWD=;Database=Test') # Needs ID and PWD
        Name = "SELECT top(100) [MPAN] ,[Customer],[TradingName],[Address],[PostCode],[SiteName]FROM [BWSGeneral].[data].[FlexMPAN] WHERE MPAN='"+ MPANS[0] +"'"
        Name = pd.read_sql_query(Name, conn)
        Enter3.config(text="Entered", fg="green")
        nompan = []
        for mpan in MPANS:
            Name = "SELECT top(100) [MPAN] ,[Customer],[TradingName],[Address],[PostCode],[SiteName]FROM [BWSGeneral].[data].[FlexMPAN] WHERE MPAN='"+ mpan +"'"
            Name = pd.read_sql_query(Name, conn)
            if Name["TradingName"].empty:
                nompan.append(mpan)

        if len(nompan) == 0:
               MPANCheck = True
               SiteName1 = tk.Label(root, text="Data found:\n "+"Company Name: " + str(Name["TradingName"][0])+"\n Site Name: " + str(Name["SiteName"][0]),bg="#B8274A",fg="white",font=('arial', 7,'bold'))
               canvas1.create_window(585, 227, window=SiteName1)
               CompanyName = str(Name["TradingName"][0]) 
        if len(nompan) > 0:
            SiteName1 = tk.Label(root, text="No data found in SystemsLink for MPAN(s):\n{}".format(nompan),bg="#B8274A",fg="white",font=('arial', 7,'bold'))
            canvas1.create_window(585, 227, window=SiteName1)
        
    else:
        conn=pyodbc.connect(r'Driver={SQL Server}; Server=AWS-; UID=DataViewer;PWD=;Database=Test') # Needs ID and PWD
        Name = "SELECT top(100) [MPAN] ,[Customer],[TradingName],[Address],[PostCode],[SiteName]FROM [BWSGeneral].[data].[FlexMPAN] WHERE MPAN='"+ MPAN +"'"
        Name = pd.read_sql_query(Name, conn)
        Enter3.config(text="Entered", fg="green")
        if Name["TradingName"].empty:
            SiteName1 = tk.Label(root, text="No data found in SystemsLink for MPAN:\n"+str(MPAN),bg="#B8274A",fg="white",font=('arial', 7,'bold'))
            canvas1.create_window(585, 227, window=SiteName1)
        else:
            MPANCheck = True
            SiteName1 = tk.Label(root, text="Data found:\n "+"Company Name: " + str(Name["TradingName"][0])+"\n Site Name: " + str(Name["SiteName"][0]),bg="#B8274A",fg="white",font=('arial', 7,'bold'))
            canvas1.create_window(585, 227, window=SiteName1)
            CompanyName = str(Name["TradingName"][0])
    
def get_input4():
    global MPRNS
    global Name
    global MPRN
    global CompanyName
    global MPRNCheck
    MPRNS = []
    MPRN = entry4.get()
    if "/" in MPRN:
        
        MPRNS = MPRN.split("/")
        conn=pyodbc.connect(r'Driver={SQL Server}; Server=; UID=DataViewer;PWD=;Database=Test') # Needs ID and PWD
        Name = "SELECT top(100) [MPAN] ,[Customer],[TradingName],[Address],[PostCode],[SiteName]FROM [BWSGeneral].[data].[FlexMPAN] WHERE MPAN='"+ MPRNS[0] +"'"
        Name = pd.read_sql_query(Name, conn)
        Enter4.config(text="Entered", fg="green")
        nomprn = []
        for mpan in MPRNS:
            Name = "SELECT top(100) [MPAN] ,[Customer],[TradingName],[Address],[PostCode],[SiteName]FROM [BWSGeneral].[data].[FlexMPAN] WHERE MPAN='"+ mpan +"'"
            Name = pd.read_sql_query(Name, conn)
            if Name["TradingName"].empty:
                nomprn.append(mpan)

        if len(nomprn) == 0:
               MPRNCheck = True
               SiteName1 = tk.Label(root, text="Data found:\n "+"Company Name: " + str(Name["TradingName"][0])+"\n Site Name: " + str(Name["SiteName"][0]),bg="#B8274A",fg="white",font=('arial', 7,'bold'))
               canvas1.create_window(585, 227, window=SiteName1)
               CompanyName = str(Name["TradingName"][0]) 
        if len(nomprn) > 0:
            SiteName2 = tk.Label(root, text="No data found in SystemsLink for MPRN(s):\n{}".format(nomprn),bg="#B8274A",fg="white",font=('arial', 7,'bold'))
            canvas1.create_window(585, 430, window=SiteName2)
        else:
            MPRNCheck = True
            SiteName2 = tk.Label(root, text="Data found:\n "+"Company Name: " + str(Name["TradingName"][0])+"\n Site Name: " + str(Name["SiteName"][0]),bg="#B8274A",fg="white",font=('arial', 7,'bold'))
            canvas1.create_window(585, 430, window=SiteName2)
            CompanyName = str(Name["TradingName"][0])
   
            
            
            
    else:
        conn=pyodbc.connect(r'Driver={SQL Server}; Server=; UID=DataViewer;PWD=;Database=Test') 
        Name = "SELECT top(100) [MPAN] ,[Customer],[TradingName],[Address],[PostCode],[SiteName]FROM [BWSGeneral].[data].[FlexMPAN] WHERE MPAN='"+ MPRN +"'"
        Name = pd.read_sql_query(Name, conn)
        Enter4.config(text="Entered", fg="green")
        if Name["TradingName"].empty:
            SiteName2 = tk.Label(root, text="No data found in SystemsLink for MPRN:\n" + str(MPRN),bg="#B8274A",fg="white",font=('arial', 7,'bold'))
            canvas1.create_window(585, 430, window=SiteName2)
        else:
            MPRNCheck = True
            SiteName2 = tk.Label(root, text="Data found:\n "+"Company Name: " + str(Name["TradingName"][0])+"\n Site Name: " + str(Name["SiteName"][0]),bg="#B8274A",fg="white",font=('arial', 7,'bold'))
            canvas1.create_window(585, 430, window=SiteName2)
            CompanyName = str(Name["TradingName"][0])

def loaddata():
    global ElecHHD
    global Gas
    global Elec
    global CompanyName
    if len(MPANS) > 0:
        col1 = [0]*17520
        ElecHHDsum = pd.DataFrame({'mpan':[MPANS[0],MPANS[0],MPANS[0],MPANS[0],MPANS[0],MPANS[0],MPANS[0],MPANS[0],MPANS[0],MPANS[0],MPANS[0],MPANS[0]],
                                   'date':[0,0,0,0,0,0,0,0,0,0,0,0],
                                   'value':[0,0,0,0,0,0,0,0,0,0,0,0]})
        ElecSum = pd.DataFrame({'mpan':col1,
                                'date':col1,
                                'hh':col1,
                                'value':col1})
        for mpani in MPANS: 
            conn=pyodbc.connect(r'Driver={SQL Server}; Server=; UID=DataViewer;PWD=;Database=Test') # Needs ID and PWD
            ElecHHDquery ="SELECT [mpan],[date],[value]FROM [EnergyManager].[dataViewer].[UsageMonthly]WHERE mpan='"+ mpani + "' AND [date] BETWEEN '"+ StartDate + "' AND '"+ EndDate + "'ORDER BY date;"
            ElecQuery = "SELECT [mpan],[date],[hh],[value]FROM [EnergyManager].[dataViewer].[UsageHH]WHERE MeterId IN(SELECT ID FROM BWSGeneral.data.FlexMPAN WHERE MPAN IN ('" + mpani + "')) AND [date] BETWEEN '"+ StartDate +"' AND '" + EndDate + "'ORDER BY date;"
            ElecHHD = pd.read_sql_query(ElecHHDquery, conn)
            Elec = pd.read_sql_query(ElecQuery, conn)
            if len(Elec["hh"])<1:
                messagebox.showinfo("Warning", "No HH data found for MPAN:"+str(mpani) + " in SystemsLink. \n\nPlease enter data manually into input sheet and check the 'Electricity data in Excel input sheet' button." )
                checkbox13.config(state="disabled")
                checkbox13.deselect()
                checkbox11.config(state="disabled")
                checkbox11.deselect()
                
            from datetime import datetime
            if len(ElecHHD["date"])<12:
                ElecHHD["date"] = pd.to_datetime(ElecHHD["date"])
                ElecHHD.set_index('date', inplace=True)
                StartDatedt = datetime.strptime(StartDate,"%Y-%m-%d")
                EndDatedt = datetime.strptime(EndDate,"%Y-%m-%d")
                idx = pd.date_range(start=StartDatedt, end=EndDatedt, freq='MS')
                ElecHHD = ElecHHD.reindex(idx)
                ElecHHD = ElecHHD.fillna(0)
                filtered_df = ElecHHD[ElecHHD['value'] == 0]
                filtered_df.index = filtered_df.index.strftime('%Y-%m-%d')
                missing_data = filtered_df.index.tolist()
                dates_string = ', '.join(missing_data)
                ElecHHD['mpan'] = ElecHHD['mpan'].replace(0,mpani)
                ElecHHD.index.name = 'date'
                ElecHHD = ElecHHD.reset_index()
                messagebox.showinfo("Warning", "Electricity consumption values for the month(s): " + dates_string + " could not be found in the database so they've been assumed to be 0 consumption." )
            ElecHHDsum["value"] = ElecHHDsum["value"] + ElecHHD["value"]
            ElecHHDsum["date"] = ElecHHD["date"]
            ElecSum["value"] = ElecSum["value"] + Elec["value"]
            ElecSum["mpan"] = Elec["mpan"]
            ElecSum["date"] = Elec["date"]
            ElecSum["hh"] = Elec["hh"]
        Elec = ElecSum
        ElecHHD = ElecHHDsum
    elif NoElecData.get() == True:
        ElecHHD = df_Elec

    else:
        conn=pyodbc.connect(r'Driver={SQL Server}; Server=; UID=DataViewer;PWD=;Database=Test') # Needs ID and PWD
        ElecHHDquery ="SELECT [mpan],[date],[value]FROM [EnergyManager].[dataViewer].[UsageMonthly]WHERE mpan='"+ MPAN + "' AND [date] BETWEEN '"+ StartDate + "' AND '"+ EndDate + "'ORDER BY date;"
        ElecQuery = "SELECT [mpan],[date],[hh],[value]FROM [EnergyManager].[dataViewer].[UsageHH]WHERE MeterId IN(SELECT ID FROM BWSGeneral.data.FlexMPAN WHERE MPAN IN ('" + MPAN + "')) AND [date] BETWEEN '"+ StartDate +"' AND '" + EndDate + "'ORDER BY date;"
        ElecHHD = pd.read_sql_query(ElecHHDquery, conn)
        Elec = pd.read_sql_query(ElecQuery, conn)
        if len(Elec["hh"])<1:
            messagebox.showinfo("Warning", "No HH data found for MPAN:"+MPAN + " in SystemsLink. \n\nPlease enter data manually into input sheet and check the 'Electricity data in Excel input sheet' button." )
            checkbox13.config(state="disabled")
            checkbox13.deselect()
            checkbox11.config(state="disabled")
            checkbox11.deselect()
        from datetime import datetime
        if len(ElecHHD["date"])<12:
            ElecHHD["date"] = pd.to_datetime(ElecHHD["date"])
            ElecHHD.set_index('date', inplace=True)
            StartDatedt = datetime.strptime(StartDate,"%Y-%m-%d")
            EndDatedt = datetime.strptime(EndDate,"%Y-%m-%d")
            idx = pd.date_range(start=StartDatedt, end=EndDatedt, freq='MS')
            ElecHHD = ElecHHD.reindex(idx)
            ElecHHD = ElecHHD.fillna(0)
            filtered_df = ElecHHD[ElecHHD['value'] == 0]
            filtered_df.index = filtered_df.index.strftime('%Y-%m-%d')
            missing_data = filtered_df.index.tolist()
            dates_string = ', '.join(missing_data)
            ElecHHD.index.name = 'date'
            ElecHHD = ElecHHD.reset_index()
            
            messagebox.showinfo("Warning", "Electricity consumption values for the month(s): " + dates_string + " could not be found in the database so they've been assumed to be 0 consumption." )
        ElecHHD = ElecHHD.sort_values(by="date")
        ElecHHD = ElecHHD.reset_index(drop=True)
        
    if MPRNsl.get() ==True:
        conn=pyodbc.connect(r'Driver={SQL Server}; Server=; UID=DataViewer;PWD=;Database=Test') # Needs ID and PWD
        if len(MPRNS) >0:
            GasSum = pd.DataFrame({'mpan':[MPRNS[0],MPRNS[0],MPRNS[0],MPRNS[0],MPRNS[0],MPRNS[0],MPRNS[0],MPRNS[0],MPRNS[0],MPRNS[0],MPRNS[0],MPRNS[0]],
                                   'date':[0,0,0,0,0,0,0,0,0,0,0,0],
                                   'value':[0,0,0,0,0,0,0,0,0,0,0,0]})
            for mprni in MPRNS:
                GasQuery ="SELECT [mpan],[date],[value]FROM [EnergyManager].[dataViewer].[UsageMonthly]WHERE mpan='"+ mprni + "' AND [date] BETWEEN '"+ StartDate + "' AND '"+ EndDate + "'ORDER BY date;"
                
                Gas = pd.read_sql_query(GasQuery, conn)
                GasSum["value"] = GasSum["value"] + Gas["value"]
                GasSum["date"] = Gas["date"]

                from datetime import datetime
            if len(Gas["date"])<12:
                Gas["date"] = pd.to_datetime(Gas["date"])
                Gas.set_index('date', inplace=True)
                StartDatedt = datetime.strptime(StartDate,"%Y-%m-%d")
                EndDatedt = datetime.strptime(EndDate,"%Y-%m-%d")
                idx = pd.date_range(start=StartDatedt, end=EndDatedt, freq='MS')
                Gas = Gas.reindex(idx)
                Gas = Gas.fillna(0)
                filtered_df = Gas[Gas['value'] == 0]
                filtered_df.index = filtered_df.index.strftime('%Y-%m-%d')
                missing_data = filtered_df.index.tolist()
                dates_string = ', '.join(missing_data)
                Gas.index.name = 'date'
                Gas = Gas.reset_index()
                messagebox.showinfo("Warning", "Gas consumption values for the month(s) "+dates_string+ " could not be found in the database so they've been assumed to be 0 consumption." )
            
            Gas = GasSum.copy()
        else:
            conn=pyodbc.connect(r'Driver={SQL Server}; Server=; UID=DataViewer;PWD=;Database=Test') # Needs ID and PWD
            GasQuery ="SELECT [mpan],[date],[value]FROM [EnergyManager].[dataViewer].[UsageMonthly]WHERE mpan='"+ MPRN + "' AND [date] BETWEEN '"+ StartDate + "' AND '"+ EndDate + "'ORDER BY date;"
            
            Gas = pd.read_sql_query(GasQuery, conn)
            from datetime import datetime
            if len(Gas["date"])<12:
                Gas["date"] = pd.to_datetime(Gas["date"])
                Gas.set_index('date', inplace=True)
                StartDatedt = datetime.strptime(StartDate,"%Y-%m-%d")
                EndDatedt = datetime.strptime(EndDate,"%Y-%m-%d")
                idx = pd.date_range(start=StartDatedt, end=EndDatedt, freq='MS')
                Gas = Gas.reindex(idx)
                Gas = Gas.fillna(0)
                filtered_df = Gas[Gas['value'] == 0]
                filtered_df.index = filtered_df.index.strftime('%Y-%m-%d')
                missing_data = filtered_df.index.tolist()
                dates_string = ', '.join(missing_data)
                Gas.index.name = 'date'
                Gas = Gas.reset_index()
                messagebox.showinfo("Warning", "Gas consumption values for the month(s) "+dates_string+ " could not be found in the database so they've been assumed to be 0 consumption." )
            Gas = Gas.sort_values(by="date")
            Gas = Gas.reset_index(drop=True)
            
    LoadData.config(text="Data successfully loaded",bg="green", fg="white")
    Subbutton.config(state="normal")

# BUTTON TO FIND EXCEL INPUT FILE
def getExcel():
    global df_Production
    global df_DD
    global df_Benchmark
    global df_Tables
    global import_file_path
    global df_Gas2
    global df_Tables2
    global df_Elec
    global selectedProjects
    global ExcelImportCheck
    global listbox
    global selected_items
    global df_TablesSavings
    global df_TablesScope
    ExcelImportCheck = True
    import_file_path=filedialog.askopenfilename(title="Browse Excel Input File")
    df_Production=pd.read_excel(import_file_path,sheet_name=0)
    df_DD=pd.read_excel(import_file_path,sheet_name=1)
    df_Benchmark=pd.read_excel(import_file_path,sheet_name=2)
    df_Tables=pd.read_excel(import_file_path,sheet_name=3)
    df_TablesSavings=pd.read_excel(import_file_path,sheet_name=4)
    df_Gas2=pd.read_excel(import_file_path,sheet_name=6)
    df_TablesScope=pd.read_excel(import_file_path,sheet_name=5)
    df_Elec=pd.read_excel(import_file_path,sheet_name=7)
    for month in df_Production["Month"]:
        if len(month) >3:
            messagebox.showinfo("Error", "Please change month format in Excel input sheet to only 3 letters (Jan/Feb/Mar etc.) and re-import the updated and saved file.")
            return
    #PRODUCTION DATA
    if pd.isna(df_Production.iloc[0,1]) == True:
        checkbox3.config(state="disabled")
        checkbox4.config(state="disabled")
        checkbox5.config(state="disabled")
        checkbox3.deselect()
        checkbox4.deselect()
        checkbox5.deselect()
    # BENCHMARKING
    if pd.isna(df_Benchmark.iloc[0,4]) == True:
        checkbox10.config(state="disabled")
        checkbox10.deselect()
    final = os.path.basename(import_file_path)  
    label3.config(text=final, fg="green")
    
    # FINDING PROJECTS
    global FinalProjects
    ProjectList = df_Tables['EMaaS Area'].tolist()
    ProjectList = [x for x in ProjectList if not isinstance(x, float)]
    CorrectProjectList = ["Staff Training & Awareness", "Optimising of compressed air","ISO 50001 Energy","Heat Decarbonisation",
                          "Energy Policy & Energy management SOPs","Energy monitoring and targeting","HVAC controls","Gas Boiler Phase Out for hot water",
                          "Lighting management","Power quality", "Boiler Plant", "Electric Motors" ]
    FinalProjects = []
    nomatches = []
    for project in ProjectList: 
        ratios=[] 
        for i in range(len(CorrectProjectList)):
            ratio = difflib.SequenceMatcher(None, project.lower(), CorrectProjectList[i].lower()).ratio()
            ratios.append(ratio)
        MatchIndex = ratios.index(max(ratios)) 
        MatchingProject = CorrectProjectList[MatchIndex]
        if max(ratios) > 0.4:
            FinalProjects.append(MatchingProject)   
        else:
            nomatches.append(project)
    if len(nomatches) > 0:
        nomatches = list(set(nomatches))
        notmatching = tk.Label(root, text="No matches found for: \n{}".format(nomatches) )
        canvas1.create_window(1130, 450, window=notmatching)
    # MATCHING PROJECTS CHECKBOXES
    MatchingProj = tk.Label(root, text="5. Project Descriptions",bg="#B8274A",fg="white",font=('helvetica', 12, 'bold','underline'))
    canvas1.create_window(1130, 35, window=MatchingProj)
    # LIST OF ALL PROJECTS
   
    # RECTANGLE BACKGROUND
    canvas1.create_rectangle(1013, 17, 1247,600,  fill="black")  # MPRNS BACKGROUND

    def on_select(event):
        global selectedProjects
        global selected_items
        selected_items = listbox.curselection()
        selectedProjects = []
        for index in selected_items:
            item = listbox.get(index)
            selectedProjects.append(item)

        
    listbox = tk.Listbox(root, selectmode=tk.MULTIPLE,width=30,height=20)
    canvas1.create_window(1130, 250, window=listbox)
    for item in CorrectProjectList:
        listbox.insert(tk.END, item)
    
    
    for project in FinalProjects:
        if project == "Staff Training & Awareness":
            listbox.selection_set(0)
        if project == "Optimising of compressed air":
            listbox.selection_set(1)
        if project == "ISO 50001 Energy":
            listbox.selection_set(2)
        if project == "Heat Decarbonisation":
            listbox.selection_set(3)
        if project == "Energy Policy & Energy management SOPs":
            listbox.selection_set(4)
        if project == "Energy monitoring and targeting":
            listbox.selection_set(5)  
        if project == "HVAC controls":
            listbox.selection_set(6)
        if project == "Gas Boiler Phase Out for hot water":
            listbox.selection_set(7)  
        if project == "Lighting management":
            listbox.selection_set(8) 
        if project == "Power quality":
            listbox.selection_set(9)
        if project == "Boiler Plant":
            listbox.selection_set(10)
        if project == "Electric Motors":
            listbox.selection_set(11)

    
def noelec():
    global MPANS
    global ElecExcelCheck
    ElecExcelCheck = True
    MPANcheckbox.deselect()
    checkbox11.config(state="disabled")
    checkbox11.deselect()
    checkbox13.config(state="disabled")
    checkbox13.deselect()  
    MPANS = []


def nogas():
    global NoGasCheck
    NoGasCheck = True
    MPRNcheckbox.deselect()
    MPRNexcel.deselect()
    checkbox2.config(state="disabled")
    checkbox5.config(state="disabled")
    checkbox6.config(state="disabled")
    checkbox7.config(state="disabled")
    checkbox3.config(state="disabled")
    checkbox10.config(state="disabled")
    checkbox2.deselect()
    checkbox3.deselect()
    checkbox5.deselect()
    checkbox6.deselect()
    checkbox7.deselect()
    checkbox10.deselect()
    
# CONTINUE BUTTON
def Submit(root_window):
    global user_input
    global selectedProjects
    global filename
    Subbutton.config(state="disabled")
    
    second_window = tk.Toplevel(root_window)
    second_window.title("Output name")
    
    canvasX = tk.Canvas(second_window, width=400, height=400, bg='#AEAEAE')
    canvasX.pack()
    canvasX.create_rectangle(5, 10, 395,220,  fill="black")
    
    Outputlabel = tk.Label(second_window, text="Please enter a name for the report:",bg="#B8274A",fg="white",font=('helvetica', 12))
    canvasX.create_window(200, 50, window=Outputlabel)
    
    OutputEntry = tk.Entry(second_window)
    canvasX.create_window(200, 90, window=OutputEntry)
    
    selected_items = listbox.curselection()
    selectedProjects = []
    for index in selected_items:
        item = listbox.get(index)
        selectedProjects.append(item)

    def get_input_and_close():
        global user_input
        user_input = OutputEntry.get()
        
        if "<" in user_input:
            messagebox.showinfo("Error", "File name cannot contain following characters < > : / ? *")
            second_window.destroy() 
            Submit(root)
        elif ">" in user_input:
            messagebox.showinfo("Error", "File name cannot contain following characters < > : / ? *")
            second_window.destroy() 
            Submit(root)
        elif ":" in user_input:
            messagebox.showinfo("Error", "File name cannot contain following characters < > : / ? *")
            second_window.destroy() 
            Submit(root)
        elif "/" in user_input:
            messagebox.showinfo("Error", "File name cannot contain following characters < > : / ? *")
            second_window.destroy() 
            Submit(root)
        elif "?" in user_input:
            messagebox.showinfo("Error", "File name cannot contain following characters < > : / ? *")
            second_window.destroy() 
            Submit(root)
        elif "*" in user_input:
            messagebox.showinfo("Error", "File name cannot contain following characters < > : / ? *") 
            second_window.destroy() 
            Submit(root)
        else:
            second_window.destroy()  
            root_window.destroy()    


    def browse_file():
        global filename
        filename = filedialog.askdirectory()
        Destination.config(bg="green")
        Destination.config(text="Output folder selected")
        second_window.lift()
        
    
    Outputlabel = tk.Label(second_window, text="Please select a destination folder for the output report",bg="#B8274A",fg="white",font=('helvetica', 12))
    canvasX.create_window(200, 150, window=Outputlabel)
    
    Destination = tk.Button(second_window, text="Browse", command=browse_file,bg="#B8274A",fg="white",font=('helvetica', 12, 'bold'))
    canvasX.create_window(200, 190, window=Destination)
    
    OutputButton = tk.Button(second_window, text="Create Report", command=get_input_and_close,font=('helvetica', 12, 'bold'))
    canvasX.create_window(200, 380, window=OutputButton)
    

    
def format_with_commas(x, pos):
    return "{:,.0f}".format(x)

# BAR PLOT FOR MONTHLY ELECTRICITY CONSUMPTION
def ElecCons(position):
    placeholder = "{{ image" + str(position+1) + " }}"
    placeholder2 = "{{ text" + str(position+1) + " }}"

    if NoGasData.get() == True:
        dates = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
        plt.bar(dates, df_Monthly["Monthly Electricity Usage (kWh)"],width=0.6, color="#B8274A",zorder=3)
        plt.xlabel('Months', fontsize=15)
        plt.ylabel('kWh', fontsize=15)
        plt.title('Electricity Consumption, kWh', fontsize=15)
        plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(format_with_commas))
        plt.ylim(0,1.25*max(df_Monthly["Monthly Electricity Usage (kWh)"]))
        plt.grid(axis='y', linestyle='--',zorder=0)
        ax = plt.gca()
        ax.tick_params(axis='y', which='major', labelsize=15)
        plt.savefig('MonthlyElectricityConsumption.png', bbox_inches='tight')
        plt.close()
    else:  
        plt.bar(df_Monthly["Month"], df_Monthly["Monthly Electricity Usage (kWh)"],width=0.6, color="#B8274A",zorder=3)
        plt.xlabel('Months', fontsize=15)
        plt.ylabel('kWh', fontsize=15)
        plt.title('Electricity Consumption, kWh', fontsize=15)
        plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(format_with_commas))
        plt.ylim(0,1.25*max(df_Monthly["Monthly Electricity Usage (kWh)"]))
        plt.grid(axis='y', linestyle='--',zorder=0)
        ax = plt.gca()
        ax.tick_params(axis='y', which='major', labelsize=15)
        plt.savefig('MonthlyElectricityConsumption.png', bbox_inches='tight')
        plt.close()
        
    if  checkbox_var.get() == True and checkbox_var2.get() == True:
        GasCons()
        file_path = current_dir + "\\MonthlyElectricityConsumption.png"
        file_path2 = current_dir + "\\MonthlyGasConsumption.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                table = doc.add_table(1, 2)
                cell = table.cell(0, 0)
                cell_paragraph = cell.paragraphs[0]
                run = cell_paragraph.add_run()
                run.add_picture(file_path, width=Inches(3), height=Inches(2)) 
                cell = table.cell(0, 1)
                cell_paragraph = cell.paragraphs[0]
                run = cell_paragraph.add_run()
                run.add_picture(file_path2, width=Inches(3), height=Inches(2))
                move_table_after(table, paragraph)
                break
        for paragraph in doc.paragraphs:
            if placeholder2 in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run("\n[This is placeholder text for commentary on monthly electricity and gas consumption]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9)
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break 
    if checkbox_var.get() == True and checkbox_var2.get() == False:
        file_path = current_dir + "\\MonthlyElectricityConsumption.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run()
                run.add_picture(file_path, width=Inches(4), height=Inches(3))
                run = paragraph.add_run("\n \n[This is placeholder text for commentary on monthly electricity consumption]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9) 
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break
    if checkbox_var.get() == False and checkbox_var2.get() == True:
        GasCons()
        file_path = current_dir + "\\MonthlyGasConsumption.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run()
                run.add_picture(file_path, width=Inches(4), height=Inches(3))
                run = paragraph.add_run("\n \n[This is placeholder text for commentary on monthly gas consumption]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9)  
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break

# BAR PLOT FOR MONTHLY GAS CONSUMPTION
def GasCons(): 

    plt.bar(df_Monthly["Month"], df_Monthly["Monthly Gas Usage (kWh)"],width=0.6, color="#B8274A",zorder=3)
    plt.xlabel('Months', fontsize=15)
    plt.ylabel('kWh', fontsize=15)
    plt.title('Gas Consumption, kWh', fontsize=15)
    plt.ylim(0,1.25*max(df_Monthly["Monthly Gas Usage (kWh)"]))
    plt.grid(axis='y', linestyle='--',zorder=0)
    plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(format_with_commas))
    ax = plt.gca()
    ax.tick_params(axis='y', which='major', labelsize=15)
    plt.savefig('MonthlyGasConsumption.png', bbox_inches='tight')
    plt.close()
   

# BAR/LINE PLOT FOR ENERGY INTENSITY/PRODUCTION
def Intensity(position):
    placeholder = "{{ image" + str(position+1) + " }}"
    fig, ax1 = plt.subplots()
    plt.bar(df_Monthly["Month"], df_Monthly["Energy Intensity (kWh/unit of production)"],width=0.6, color="#B8274A",zorder=5)
    ax2 = ax1.twinx()
    plt.plot(df_Monthly["Month"], df_Production["Measurement of Production"], color='#0F4C81', marker='o', linestyle='-', label='Line Data', zorder=6)
    ax1.set_xlabel('Month')
    ax1.set_ylabel("kWh/" + str(df_Production["Unit of Production"][0]))
    ax1.tick_params(axis='y')
    ax1.set_title("Energy Intensity, kWh/"+ str(df_Production["Unit of Production"][0]))
    ax2.set_ylabel(str(df_Production["Unit of Production"][0]))
    ax2.tick_params(axis='y')
    plt.xticks(rotation=45, ha='right')
    ax2.grid(False)
    plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(format_with_commas))
    ax2.legend(["Production Data"], bbox_to_anchor=(1,-0.1))
    plt.savefig('EnergyIntensity.png', bbox_inches='tight')
    plt.close()
    if checkbox_var3.get() == True:
        file_path = current_dir + "\\EnergyIntensity.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run()
                run.add_picture(file_path, width=Inches(4), height=Inches(3))
                run = paragraph.add_run("\n \n[This is placeholder text for commentary on energy intensity]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9)  
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break

# ELECTRICITY VS PRODUCTION
def ElecVsProd(position):
    placeholder = "{{ image" + str(position+1) + " }}"
    placeholder2 = "{{ text" + str(position+1) + " }}"

    plt.scatter(df_Production["Measurement of Production"],df_Monthly["Monthly Electricity Usage (kWh)"],color="#0F4C81",zorder=3)
    plt.ylabel('kWh', fontsize=15)
    plt.grid(linestyle='--',zorder=0)
    slope, intercept, r_value, p_value, std_err = linregress(df_Production["Measurement of Production"], df_Monthly["Monthly Electricity Usage (kWh)"])
    line = slope * df_Production["Measurement of Production"] + intercept
    equation = "y = " + str(round(slope,3)) + "x + "+ str(round(intercept,3))
    plt.plot(df_Production["Measurement of Production"], line, color='#B8274A', label='Line of Best Fit',linestyle='-')
    r_squared = r_value ** 2
    r_squared_str = str(round(r_squared,3))
    plt.xlabel(str(df_Production["Unit of Production"][0]) + "\n\nR-Squared value: " +r_squared_str+ "\n" + equation, fontsize=15)
    plt.legend()
    plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(format_with_commas))
    plt.title("Electricity kWh per " + str(df_Production["Unit of Production"][0]), fontsize=15)
    ax = plt.gca()
    ax.tick_params(axis='y', which='major', labelsize=15)
    plt.savefig('ElectricityVsProduction.png', bbox_inches='tight')
    plt.close()
    if  checkbox_var4.get() == True and checkbox_var5.get() == True:
        GasVsProd()
        file_path = current_dir + "\\ElectricityVsProduction.png"
        file_path2 = current_dir + "\\GasVsProduction.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                table = doc.add_table(1, 2)
                cell = table.cell(0, 0)
                cell_paragraph = cell.paragraphs[0]
                run = cell_paragraph.add_run()
                run.add_picture(file_path, width=Inches(3), height=Inches(2)) 
                cell = table.cell(0, 1)
                cell_paragraph = cell.paragraphs[0]
                run = cell_paragraph.add_run()
                run.add_picture(file_path2, width=Inches(3), height=Inches(2))  
                move_table_after(table, paragraph)
                break
        for paragraph in doc.paragraphs:
            if placeholder2 in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run("\n[This is placeholder text for commentary on electricity and gas vs production data]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9)
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break
    if checkbox_var4.get() == True and checkbox_var5.get() == False:
        file_path = current_dir + "\\ElectricityVsProduction.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run()
                run.add_picture(file_path, width=Inches(4), height=Inches(3))
                run = paragraph.add_run("\n \n[This is placeholder text for commentary on electricity vs production data]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9) 
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break    
    if checkbox_var5.get() == True and checkbox_var4.get() == False:
        GasVsProd ()
        file_path = current_dir + "\\GasVsProduction.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run()
                run.add_picture(file_path, width=Inches(4), height=Inches(3))
                run = paragraph.add_run("\n \n[This is placeholder text for commentary on gas vs production data]")
                paragraph = doc.add_paragraph()
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9) 
                break

# GAS VS PRODUCTION
def GasVsProd():
    plt.scatter(df_Production["Measurement of Production"],df_Monthly["Monthly Gas Usage (kWh)"],color="#0F4C81",zorder=3)
    plt.ylabel('kWh', fontsize=15)
    plt.grid(linestyle='--',zorder=0)
    slope, intercept, r_value, p_value, std_err = linregress(df_Production["Measurement of Production"], df_Monthly["Monthly Gas Usage (kWh)"])
    line = slope * df_Production["Measurement of Production"] + intercept
    equation = "y = " + str(round(slope,3)) + "x + "+ str(round(intercept,3))
    plt.plot(df_Production["Measurement of Production"], line, color='#B8274A', label='Line of Best Fit',linestyle='-')
    r_squared = r_value ** 2
    r_squared_str = str(round(r_squared,3))
    plt.xlabel(str(df_Production["Unit of Production"][0]) + "\n\nR-Squared value: " +r_squared_str+ "\n" + equation, fontsize=15)
    plt.legend()
    plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(format_with_commas))
    plt.title("Gas kWh per "+str(df_Production["Unit of Production"][0]), fontsize=15)
    ax = plt.gca()
    ax.tick_params(axis='y', which='major', labelsize=15)
    plt.savefig('GasVsProduction.png', bbox_inches='tight')
    plt.close()

# GAS VS HDD
def GasHDD(position):
    placeholder = "{{ image" + str(position+1) + " }}"
    placeholder2 = "{{ text" + str(position+1) + " }}"
    plt.scatter(df_DD["HDD"],df_Monthly["Monthly Gas Usage (kWh)"],color="#0F4C81",zorder=3)
    plt.ylabel('kWh', fontsize=15)
    plt.grid(linestyle='--',zorder=0)
    slope, intercept, r_value, p_value, std_err = linregress(df_DD["HDD"],df_Monthly["Monthly Gas Usage (kWh)"])
    equation = "y = " + str(round(slope,3)) + "x + "+ str(round(intercept,3))
    line = slope * df_DD["HDD"] + intercept
    plt.plot(df_DD["HDD"], line, color='#B8274A', label='Line of Best Fit',linestyle='-')
    r_squared = r_value ** 2
    r_squared_str = str(round(r_squared,3))
    plt.xlabel('HDD' + "\n\nR-Squared value: " +r_squared_str+ "\n" + equation, fontsize=15)
    plt.legend()
    plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(format_with_commas))
    plt.title('Natural Gas kWh vs HDD', fontsize=15)
    ax = plt.gca()
    ax.tick_params(axis='y', which='major', labelsize=15)
    plt.savefig('GasVsHDD.png', bbox_inches='tight')
    plt.close()
    if  checkbox_var6.get() == True and checkbox_var7.get() == True:
        GasCDD()
        file_path = current_dir + "\\GasVsHDD.png"
        file_path2 = current_dir + "\\GasVsCDD.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                table = doc.add_table(1, 2)
                cell = table.cell(0, 0)
                cell_paragraph = cell.paragraphs[0]
                run = cell_paragraph.add_run()
                run.add_picture(file_path, width=Inches(3), height=Inches(2)) 
                cell = table.cell(0, 1)
                cell_paragraph = cell.paragraphs[0]
                run = cell_paragraph.add_run()
                run.add_picture(file_path2, width=Inches(3), height=Inches(2))  
                move_table_after(table, paragraph) 
                break
        for paragraph in doc.paragraphs:
            if placeholder2 in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run("\n[This is placeholder text for commentary on gas vs HDD and CDD data]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9)
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break
    if checkbox_var6.get() == True and checkbox_var7.get() == False:
        file_path = current_dir + "\\GasVsHDD.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run()
                run.add_picture(file_path, width=Inches(4), height=Inches(3))
                run = paragraph.add_run("\n \n[This is placeholder text for commentary on gas vs HDD data]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9)  
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break
    if checkbox_var7.get() == True and checkbox_var6.get() == False:
        GasCDD ()
        file_path = current_dir + "\\GasVsCDD.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run()
                run.add_picture(file_path, width=Inches(4), height=Inches(3))
                run = paragraph.add_run("\n \n[This is placeholder text for commentary on Gas vs CDD data]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9)   
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break

# GAS VS CDD
def GasCDD():
    plt.scatter(df_DD["CDD"],df_Monthly["Monthly Gas Usage (kWh)"],color="#0F4C81",zorder=3)
    plt.ylabel('kWh', fontsize=15)
    plt.grid(linestyle='--',zorder=0)
    slope, intercept, r_value, p_value, std_err = linregress(df_DD["CDD"],df_Monthly["Monthly Gas Usage (kWh)"])
    line = slope * df_DD["CDD"] + intercept
    plt.plot(df_DD["CDD"], line, color='#B8274A', label='Line of Best Fit',linestyle='-')
    r_squared = r_value ** 2
    r_squared_str = str(round(r_squared,3))
    equation = "y = " + str(round(slope,3)) + "x + "+ str(round(intercept,3))
    plt.xlabel('CDD' + "\n\nR-Squared value: " +r_squared_str+ "\n" + equation, fontsize=15)
    plt.legend()
    plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(format_with_commas))
    plt.title('Natural Gas kWh vs CDD', fontsize=15)
    ax = plt.gca()
    ax.tick_params(axis='y', which='major', labelsize=15)
    plt.savefig('GasVsCDD.png', bbox_inches='tight')
    plt.close()

# ELECTRICITY VS CDD
def ElecCDD(position):
    placeholder = "{{ image" + str(position+1) + " }}"
    placeholder2 = "{{ text" + str(position+1) + " }}"
    plt.scatter(df_DD["CDD"],df_Monthly["Monthly Electricity Usage (kWh)"],color="#0F4C81",zorder=3)
    plt.ylabel('kWh', fontsize=15)
    plt.grid(linestyle='--',zorder=0)
    slope, intercept, r_value, p_value, std_err = linregress(df_DD["CDD"],df_Monthly["Monthly Electricity Usage (kWh)"])
    line = slope * df_DD["CDD"] + intercept
    plt.plot(df_DD["CDD"], line, color='#B8274A', label='Line of Best Fit',linestyle='-')
    r_squared = r_value ** 2
    r_squared_str = str(round(r_squared,3))
    equation = "y = " + str(round(slope,3)) + "x + "+ str(round(intercept,3))
    plt.xlabel('CDD' + "\n\nR-Squared value: " +r_squared_str+ "\n" + equation, fontsize=15)
    plt.legend()
    plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(format_with_commas))
    plt.title('Electricity kWh vs CDD', fontsize=15)
    ax = plt.gca()
    ax.tick_params(axis='y', which='major', labelsize=15)
    plt.savefig('ElectricityVsCDD.png', bbox_inches='tight')
    plt.close()
    if  checkbox_var8.get() == True and checkbox_var9.get() == True:
        ElecHDD()
        file_path = current_dir + "\\ElectricityVsHDD.png"
        file_path2 = current_dir + "\\ElectricityVsCDD.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                table = doc.add_table(1, 2)
                cell = table.cell(0, 0)
                cell_paragraph = cell.paragraphs[0]
                run = cell_paragraph.add_run()
                run.add_picture(file_path, width=Inches(3), height=Inches(2)) 
                cell = table.cell(0, 1)
                cell_paragraph = cell.paragraphs[0]
                run = cell_paragraph.add_run()
                run.add_picture(file_path2, width=Inches(3), height=Inches(2))  
                move_table_after(table, paragraph) 
                break
        for paragraph in doc.paragraphs:
            if placeholder2 in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run("\n[This is placeholder text for commentary on electricity vs CDD and HDD]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9)
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break
    if checkbox_var8.get() == True and checkbox_var9.get() == False:
        file_path = current_dir + "\\ElectricityVsCDD.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run()
                run.add_picture(file_path, width=Inches(4), height=Inches(3))
                run = paragraph.add_run("\n \n[This is placeholder text for commentary on electricity vs CDD]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9) 
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break
    if checkbox_var9.get() == True and checkbox_var8.get() == False:
        ElecHDD ()
        file_path = current_dir + "\\ElectricityVsHDD.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run()
                run.add_picture(file_path, width=Inches(4), height=Inches(3))
                run = paragraph.add_run("\n \n[This is placeholder text for commentary on electricity vs HDD]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9) 
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break

# ELECTRICITY VS HDD
def ElecHDD():
    plt.scatter(df_DD["HDD"],df_Monthly["Monthly Electricity Usage (kWh)"],color="#0F4C81",zorder=3)
    plt.ylabel('kWh', fontsize=15)
    plt.grid(linestyle='--',zorder=0)
    slope, intercept, r_value, p_value, std_err = linregress(df_DD["HDD"], df_Monthly["Monthly Electricity Usage (kWh)"])
    line = slope * df_DD["HDD"] + intercept
    plt.plot(df_DD["HDD"], line, color='#B8274A', label='Line of Best Fit',linestyle='-')
    r_squared = r_value ** 2
    r_squared_str = str(round(r_squared,3))
    equation = "y = " + str(round(slope,3)) + "x + "+ str(round(intercept,3))
    plt.xlabel('HDD' + "\n\nR-Squared value: " +r_squared_str+ "\n" + equation, fontsize=15)
    plt.legend()
    plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(format_with_commas))
    plt.title('Electricity kWh vs HDD', fontsize=15)
    ax = plt.gca()
    ax.tick_params(axis='y', which='major', labelsize=15)
    plt.savefig('ElectricityVsHDD.png', bbox_inches='tight')
    plt.close()

# BENCHMARKING PLOT
def Benchmarking(position):
    placeholder = "{{ image" + str(position+1) + " }}"
    totalgas = df_Monthly["Monthly Gas Usage (kWh)"].sum()
    totalelec = df_Monthly["Monthly Electricity Usage (kWh)"].sum()
    Fossil_Fuel = [df_Benchmark["Adjusted Values"][0],df_Benchmark["Adjusted Values"][2],totalgas]
    Electricity = [df_Benchmark["Adjusted Values"][1],df_Benchmark["Adjusted Values"][3],totalelec]
    opacity = 1
    bar_width = 0.3
    plt.ylabel('kWh')
    plt.xticks(range(len(Fossil_Fuel)),("Good Practice","Typical Practice","Actual Practice"))
    plt.bar(np.arange(len(Fossil_Fuel)) + bar_width, Fossil_Fuel, bar_width, align='center', alpha=opacity, color='#397E85', label='Fossil Fuel',zorder=3)
    plt.bar(range(len(Electricity)), Electricity, bar_width, align='center', alpha=opacity, color='#0F4C81', label='Electricity',zorder=3)
    plt.legend()
    plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(format_with_commas))
    plt.tight_layout()
    plt.title("Benchmarking")
    plt.grid(axis='y', linestyle='--',zorder=0)
    plt.savefig('Benchmarking.png', bbox_inches='tight')
    plt.close()
    if checkbox_var10.get() == True:
        file_path = current_dir + "\\Benchmarking.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run()
                run.add_picture(file_path, width=Inches(4), height=Inches(3))
                run = paragraph.add_run("\n \n[This is placeholder text for commentary on benchmarking data]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9)
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break

# BASELOAD SPLIT PLOTS
def Baseloading(position):
    
    placeholder = "{{ image" + str(position+1) + " }}"
    plt.plot(df_Baseload["Time"],df_Baseload["Monday"],label = "Monday",zorder=3)
    plt.plot(df_Baseload["Time"],df_Baseload["Tuesday"],label = "Tuesday",zorder=3)
    plt.plot(df_Baseload["Time"],df_Baseload["Wednesday"],label = "Wednesday",zorder=3)
    plt.plot(df_Baseload["Time"],df_Baseload["Thursday"],label = "Thursday",zorder=3)
    plt.plot(df_Baseload["Time"],df_Baseload["Friday"],label = "Friday",zorder=3)
    plt.plot(df_Baseload["Time"],df_Baseload["Saturday"],label = "Saturday",zorder=3)
    plt.plot(df_Baseload["Time"],df_Baseload["Sunday"],label = "Sunday",zorder=3)
    plt.xticks(rotation=45, ha='right')
    plt.ylabel('kWh Usage')
    plt.title("Average Weekly Usage")
    plt.xlim("00:30","23:59")
    p = []
    for i in range(48):
        p.append((""))
    plt.xticks(list(df_Baseload['Time']),p, minor=True)
    plt.xticks(["01:00","03:00","05:00","07:00","09:00","11:00","13:00","15:00","17:00","19:00","21:00","23:00"])
    if len(MPANS) > 0:
        areaCode = int(MPANS[0])
    else:
        areaCode = int(MPAN)
    if areaCode==10:
        #Green
        plt.axvspan(0, 13, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(45, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(13, 31, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(37, 45, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(31, 37, facecolor='#ce0000', alpha=0.3)
    
    elif areaCode==11:
        #Green
        plt.axvspan(0, 14, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(41, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(14, 31, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(37, 41, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(31, 37, facecolor='#ce0000', alpha=0.3)
    
    elif areaCode==12:
        #Green
        plt.axvspan(0, 13, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(45, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(13, 21, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(27, 31, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(37, 45, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(21, 27, facecolor='#ce0000', alpha=0.3)
        plt.axvspan(31, 37, facecolor='#ce0000', alpha=0.3)
    
    elif areaCode==13:
        #Green
        plt.axvspan(0, 15, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(44, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(15, 32, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(38, 44, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(32, 38, facecolor='#ce0000', alpha=0.3)
    
    elif areaCode==14:
        #Green
        plt.axvspan(0, 14, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(41, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(14, 31, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(37, 41, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(31, 37, facecolor='#ce0000', alpha=0.3)
    
    elif areaCode==15:
        #Green
        plt.axvspan(0, 15, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(43, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(15, 31, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(38, 43, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(31, 38, facecolor='#ce0000', alpha=0.3)
       
    elif areaCode==16:
        #Green
        plt.axvspan(0, 17, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(40, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(17, 31, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(37, 40, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(31, 37, facecolor='#ce0000', alpha=0.3)
    
    elif areaCode==17:
        #Green
        plt.axvspan(0, 13, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(41, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(13, 31, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(37, 41, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(31, 37, facecolor='#ce0000', alpha=0.3)
    
    elif areaCode==18:
        #Green
        plt.axvspan(0, 15, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(44, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(15, 32, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(38, 44, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(32, 38, facecolor='#ce0000', alpha=0.3)
    
    elif areaCode==19:
        #Green
        plt.axvspan(0, 13, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(45, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(13, 31, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(37, 45, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(31, 37, facecolor='#ce0000', alpha=0.3)
    
    elif areaCode==20:
        #Green
        plt.axvspan(0, 13, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(43, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(13, 32, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(38, 43, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(32, 38, facecolor='#ce0000', alpha=0.3)
    
    elif areaCode==21:
        #Green
        plt.axvspan(0, 14, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(43, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(14, 33, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(38, 43, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(33, 38, facecolor='#ce0000', alpha=0.3)
    
    elif areaCode==22:
        #Green
        plt.axvspan(0, 14, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(42, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(14, 33, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(37, 42, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(33, 37, facecolor='#ce0000', alpha=0.3)
    
    elif areaCode==23:
        #Green
        plt.axvspan(0, 15, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(43, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(15, 31, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(38, 43, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(31, 38, facecolor='#ce0000', alpha=0.3)
    
    else:
        #Green
        plt.axvspan(0, 13, facecolor='#00CC00', alpha=0.3)
        plt.axvspan(45, 47, facecolor='#00CC00', alpha=0.3)
        #Amber
        plt.axvspan(13, 31, facecolor='#ffbf00', alpha=0.3)
        plt.axvspan(37, 45, facecolor='#ffbf00', alpha=0.3)
        #Red
        plt.axvspan(31, 37, facecolor='#ce0000', alpha=0.3)
    
    plt.legend(loc='upper center', bbox_to_anchor=(0.5,-0.15), fancybox=True, ncol=7)
    plt.grid(which="both",linestyle='--',zorder=0)
    plt.savefig('Baseload.png', bbox_inches='tight')

    plt.close()

    if checkbox_var11.get() == True:
       
       
        file_path = current_dir + "\\Baseload.png"
        for paragraph in doc.paragraphs:
        
            if placeholder in paragraph.text:

                paragraph.clear()
                run = paragraph.add_run()
                run.add_picture(file_path, width=Inches(5), height=Inches(3))

                run = paragraph.add_run("\n \n[This is placeholder text for commentary on baseloading data]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9)
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
              
                break
        

# HEATMAP PLOT (REPRESENTS 52 WEEKS)
def HeatmapWeekly(position):
    placeholder = "{{ image" + str(position+1) + " }}"

    df_Electricity5 = Elec2.drop(columns=[])
    df_Electricity5['DATE'] = df_Electricity5['DATE'].astype(str)
    df_Electricity5.set_index('DATE', inplace=True)
    for column in df_Electricity5:
        new_column_name = str(column)[:-3]
        df_Electricity5.rename(columns={column: new_column_name}, inplace=True)
    df_Electricity3 = pd.DataFrame()
    def rolling_average(df, column, window_size):
        averages = []
        for i in range(0, len(df), window_size):
            window = df[column].iloc[i:i+window_size]
            if len(window) < window_size:
                break
            averages.append(window.mean())
        return averages
    ind = [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47]
    for i in ind:
        avg = rolling_average(df_Electricity5, df_Electricity5.columns[i], 7)
        df_Electricity3[str(i)] = avg
    
    titles = ["01:00","02:00","03:00","04:00","05:00","06:00","07:00","09:00",
              "09:00","10:00","11:00","12:00","13:00","14:00","15:00","16:00",
              "17:00","18:00","19:00","20:00","21:00","22:00","23:00","24:00"]
    
    for i in range(df_Electricity3.shape[1]):
        df_Electricity3 = df_Electricity3.rename(columns={str(ind[i]): titles[i]})
        
    start_date = str(df_Electricity5.index[0])
    end_date = str(df_Electricity5.index[364])
    
    date_list = pd.date_range(start=start_date, end=end_date, freq='7D')
    
    date_list = date_list.tolist()
    date_list.pop(0)
    
    df_Electricity3["Date"] = date_list
    df_Electricity3["Date"] = df_Electricity3["Date"].astype(str)
    df_Electricity3 = df_Electricity3.set_index('Date')
    
    heatmap2 = sns.heatmap(df_Electricity3,cmap="coolwarm", cbar_kws={'label': 'Electricity Usage (kWh)'})
    plt.title("Electricity Usage Heatmap")
    heatmap2.set_xlabel("Time")
    heatmap2.set_ylabel("Date")
    heatmap2.figure.savefig('Heatmap2.png',bbox_inches='tight')
    plt.close()
    if checkbox_var13.get() == True:
       
        file_path = current_dir + "\\Heatmap2.png"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                run = paragraph.add_run()
                run.add_picture(file_path, width=Inches(4), height=Inches(3))
                run = paragraph.add_run("\n \n[This is placeholder text for commentary on heatmap weekly data]")
                paragraph = doc.add_paragraph()
                font = run.font
                font.name = 'Arial'  
                font.size = Pt(9)
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                break


# FUNCTION TO MOVE TABLES WITHIN DOCUMENT
def move_table_after(table, paragraph):
    tbl, p = table._tbl, paragraph._p
    p.addnext(tbl)
    

# CREATE AND IMPORT EMAAS TABLES (TABLES 1&2)
def table12():
    global rows
    global df_Tables
    rows = len(df_Tables["EMaaS Area"]) + 1
    placeholder = "{{ table1 }}"
    placeholder2 = "{{footnote}}"
    df_Tables = df_Tables.dropna(subset=["EMaaS Area"])
    for paragraph in doc.paragraphs:
        if placeholder in paragraph.text:
            paragraph.clear()
            table = doc.add_table(rows+1, 7)
            table.style='BWSv3'
            heading_cells=table.rows[0].cells
            heading_cells[0].text="EMaaS Area"
            heading_cells[1].text='Opportunity Value'
            heading_cells[2].text="Investment"
            heading_cells[3].text="ROI"
            heading_cells[4].text="Electricity Savings (kWh)"
            heading_cells[5].text="Gas Savings (kWh)"
            heading_cells[6].text="tCO2 Reduction"
            for i in range(rows):
                if i == (rows-1):
                    row1=table.rows[i+1]
                    row1.cells[0].text= "Total"
                    row1.cells[1].text= "£"+str(round(df_Tables["Opportunity Value"].sum(),2))
                    row1.cells[2].text= "£"+str(round(df_Tables["Investment"].sum(),2))
                    row1.cells[3].text= str(round(df_Tables["Investment"].sum()/df_Tables["Opportunity Value"].sum(),2))
                    row1.cells[4].text= str(round(df_Tables["Electricity Savings (kWh)"].sum(),2))
                    row1.cells[5].text= str(round(df_Tables["Gas Savings (kWh)"].sum(),2))
                    row1.cells[6].text= str(round(df_Tables["tCO2 Reduction"].sum(),2))
                    move_table_after(table, paragraph)
                    break
                row1=table.rows[i+1]
                row1.cells[0].text= str(df_Tables["EMaaS Area"][i])
                row1.cells[1].text= "£"+str(round(df_Tables["Opportunity Value"][i],2))
                row1.cells[2].text= "£"+str(round(df_Tables["Investment"][i],2))
                row1.cells[3].text= str(round(df_Tables["ROI"][i],2))
                row1.cells[4].text= str(round(df_Tables["Electricity Savings (kWh)"][i],2))
                row1.cells[5].text= str(round(df_Tables["Gas Savings (kWh)"][i],2))
                row1.cells[6].text= str(round(df_Tables["tCO2 Reduction"][i],2))
            # FORMATTING TABLE CONTENTS
            cell = table.cell(0,0)
            cell.paragraphs[0].style = "TableHeader"
            cell = table.cell(0,1)
            cell.paragraphs[0].style = "TableHeader"
            cell = table.cell(0,2)
            cell.paragraphs[0].style = "TableHeader"
            cell = table.cell(0,3)
            cell.paragraphs[0].style = "TableHeader"
            cell = table.cell(0,4)
            cell.paragraphs[0].style = "TableHeader"
            cell = table.cell(0,5)
            cell.paragraphs[0].style = "TableHeader"
            tablelen = len(df_Tables["EMaaS Area"])
            for i in range(1,tablelen+1):
                cell = table.cell(i,0)
                cell.paragraphs[0].style = "LeftColumn2"
            for i in [1,2,3,4,5,6]:
                for j in range(1,tablelen+2):
                    cell = table.cell(j,i)
                    cell.paragraphs[0].style = "TableCentred"
            break
    for paragraph in doc.paragraphs:
        if placeholder2 in paragraph.text:
            paragraph.clear()
            run = paragraph.add_run("Here is a summary of site opportunities which could be implemented to provide Energy, Cost or Carbon savings for site. It is important to note that for this initial report, Interactive effects between measures have not been considered, energy and carbon savings were considered in isolation. \n\nTo understand the dynamic interaction of implementing project we must first consider their implementation priority and what fuel they impact and why. This would constitute an investment level dynamic impact assessment and can be conducted as part of a further piece of work.")
            paragraph = doc.add_paragraph()
            font = run.font
            font.name = 'Arial'  
            font.size = Pt(9)
            paragraph.alignment = 0 
            run.font.italic = True
            break
    df_Tables = df_TablesSavings.dropna(subset=['Energy Type'])
    rows = len(df_TablesSavings["Energy Type"]) 
    placeholder = "{{ table2 }}"
    for paragraph in doc.paragraphs:
        if placeholder in paragraph.text:
            paragraph.clear()
            table = doc.add_table(rows+1, 4)
            table.style='BWSv3'
            heading_cells=table.rows[0].cells
            heading_cells[0].text=""
            heading_cells[1].text='kWh Saving'
            heading_cells[2].text="tCO2 Reduction"
            heading_cells[3].text="% reduction"
            for i in range(rows):
                row1=table.rows[i+1]
                row1.cells[0].text= str(df_TablesSavings["Energy Type"][i])
                row1.cells[1].text= str(round(df_TablesSavings["kWh Saving"][i],2))
                row1.cells[2].text= str(round(df_TablesSavings["tCO2 Reduction"][i],2))
                row1.cells[3].text= str(round(df_TablesSavings["% Reduction"][i]*100,2))+"%"
                move_table_after(table, paragraph)
            cell = table.cell(0,1)
            cell.paragraphs[0].style = "TableHeader"
            cell = table.cell(0,2)
            cell.paragraphs[0].style = "TableHeader"
            cell = table.cell(0,3)
            cell.paragraphs[0].style = "TableHeader"
            tablelen = len(df_TablesSavings["Energy Type"])
            for i in range(1,tablelen+1):
                cell = table.cell(i,0)
                cell.paragraphs[0].style = "LeftColumn"
            
            for i in [1,2,3]:
                for j in range(1,tablelen+1):
                    cell = table.cell(j,i)
                    cell.paragraphs[0].style = "TableCentred"    
            break


# CREATE AND IMPORT SCOPE1/2/3 TABLE
def table3():
    placeholder = "{{ table3 }}"
    for paragraph in doc.paragraphs:
        if placeholder in paragraph.text:
            paragraph.clear()
            table = doc.add_table(5, 4)
            table.style='BWSv3'
            heading_cells=table.rows[0].cells
            heading_cells[0].text="Carbon Emissions"
            heading_cells[1].text='GHG Scope'
            heading_cells[2].text="Consumed, kWh"
            heading_cells[3].text="tCO2e"
            row1=table.rows[1]
            row1.cells[0].text='Electricity'
            row1.cells[1].text="Scope 2"
            row1.cells[2].text= str(round(df_TablesScope["Consumed, kWh"][0],2))
            row1.cells[3].text= str(round(df_TablesScope["tCO2e"][0],2))
            row1=table.rows[2]
            row1.cells[0].text='Main Gas'
            row1.cells[1].text="Scope 1"
            row1.cells[2].text= str(round(df_TablesScope["Consumed, kWh"][1],2))
            row1.cells[3].text= str(round(df_TablesScope["tCO2e"][1],2))
            row1=table.rows[3]
            row1.cells[0].text=''
            row1.cells[1].text="Scope 3*"
            row1.cells[2].text= str(round(df_TablesScope["Consumed, kWh"][2],2))
            row1.cells[3].text= str(round(df_TablesScope["tCO2e"][2],2))
            row1=table.rows[4]
            row1.cells[0].text='Total'
            row1.cells[1].text=""
            row1.cells[2].text= ""
            row1.cells[3].text= str(round(df_TablesScope["tCO2e"][3],2))
            move_table_after(table, paragraph)
            cell = table.cell(0,0)
            cell.paragraphs[0].style = "TableHeader"
            cell = table.cell(0,1)
            cell.paragraphs[0].style = "TableHeader"
            cell = table.cell(0,2)
            cell.paragraphs[0].style = "TableHeader"
            cell = table.cell(0,3)
            cell.paragraphs[0].style = "TableHeader"
            cell = table.cell(1,0)
            cell.paragraphs[0].style = "LeftColumn"
            cell = table.cell(2,0)
            cell.paragraphs[0].style = "LeftColumn"
            for i in [2,3]:
                for j in [1,2,3,4]:
                    cell = table.cell(j,i)
                    cell.paragraphs[0].style = "TableCentred"
            break

# FUNCTION FOR DELETING USED IMAGES
def delete_files_with_name(directory, name):
    for filename in os.listdir(directory):
        if filename == name:
            file_path = os.path.join(directory, filename)
            os.remove(file_path)
def replace_text(doc, old_text, new_text):
    for paragraph in doc.paragraphs:
        if old_text in paragraph.text:
            paragraph.text = paragraph.text.replace(old_text, new_text)
    
    
#%%

# DICTIONARY
# DICTIONARY FUNCTIONS
def download_image(url):
    response = requests.get(url)
    if response.status_code == 200:
        return BytesIO(response.content)
    else:
        print("Failed to download image from URL:", url)
        return None

def EnergyMonitoring(position):
    placeholderTitle = "{{title" + str(position+1) + "}}"
    placeholderText = "{{text" + str(position+1) + "}}"
    Title = "Energy monitoring and targeting"
    Staff_Training1 = "Submetering on electrical circuits is useful to split out consumption by area, business purpose or time of day, as well as identifying opportunities for energy efficiency improvements. Without it, the whole site’s consumption is mixed and it can make justifying investment in individual machines and areas difficult. From this data any unnecessary or excessive electricity use may be investigated, identified and either reduced or eliminated. Active use of such systems aligned with Metering Monitoring and Targeting can lead to a reduction in annual electricity consumption by a conservative 3 - 5%. Following implementation of changes or projects can then be monitored and targets set to gauge the performance and inform further action."
    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Staff_Training1)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0  
    # TITLE   
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Title)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(14) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)


def StaffTraining(position):
    placeholderTitle = "{{title" + str(position+1) + "}}"
    placeholderText = "{{text" + str(position+1) + "}}"
    Title = "Site Project: Staff Training & Awareness Materials"
    Staff_Training1 = "Staff at different levels of authority and different departments will have differing training requirements to ensure they are all acting on whatever energy reduction opportunities they can observe. \n \nFor example, the senior management and the engineering department might require training on the application of monitoring and targeting energy systems. Whereas building occupants might need to increase their awareness and understanding of how they can directly impact the energy and carbon emissions of the site by making small changes in their day-to-day routines. Engineering staff might require specific and semi-regular training that relate to best industry practices, development of more efficiency technologies for use on site, etc. \n \nThis will be a project which follows on from the implementation of a company-wide energy policy and energy management system. It is advised that an initial training session be provided for the senior leadership team and with this team identify key members of staff and disseminate throughout departments. We would then develop bespoke training materials for these teams and supporting awareness materials to be published in appropriate areas for the business such as notice boards, staff intranet, on machinery, or break rooms. This is estimated to take 80 consulting hours for development and delivery."
    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Staff_Training1)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    # TITLE
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Title)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(14) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)



def HeatDecarbonisation(position):
    placeholderTitle = "{{title" + str(position+1) + "}}"
    placeholderText = "{{text" + str(position+1) + "}}"
    Title = "Heat Decarbonisation"
    Text = "To reduce emissions from heating, we must find low-carbon fuels or switch to electric. Hydrogen or bio-sourced fuel boilers require a reliable fuel supply which is not available nationwide. Hence this section will focus on electric options: heat pumps and electric resistive heating. In general heat pumps use a working fluid, typically refrigerants to generate more heat than the mechanical work put in due to the thermodynamic properties of the working fluid. These refrigerants have been used in air conditioning and chilling applications for decades. In chilling applications, the dissipation of heat (the condenser) is outside and the absorber of heat (the evaporator) is inside taking away heat to produce cooling. Heat pumps swap the locations of heat absorption and heat delivery.\n\nIf all the gas usage could be swapped to a heat pump with COP 3, electricity use would increase by <<< 850 MWh, and reduce carbon emissions by 289 t CO2 >>>. As the grid reduces in carbon intensity, the carbon savings would increase. The challenge with heat pumps is the application as the technology develops to deliver temperatures that can already be delivered by gas-fired boilers and the rest of the heating system may need to be redesigned. For example, large radiators to accommodate lower flow temperatures and space for hot water tanks and outdoor units. In addition, the installed and running costs of the units are generally higher with a wide range of costs from £500k/MW to £2000k/MW. It is expected prices will have to come down for the UK to meet net zero. \n\nTo get a fully costed and designed system, a heat pump designer would need to be engaged to understand the installed capacity required."
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text)
            run3 = new_paragraph.runs[0]
            run3.font.name = 'Arial'  
            run3.font.size = Pt(10)
            new_paragraph.alignment = 0
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Title)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(14) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    
    

def BoilerPlant(position):
    placeholderTitle = "{{title" + str(position+1) + "}}"
    placeholderText = "{{text" + str(position+1) + "}}"
    Title = "Site Project: Boiler Plant"
    Subtitle = "Steam trap testing"
    Text = "Conducting a steam trap survey on a steam network provides numerous benefits that positively impact a business's operations. Firstly, the survey identifies malfunctioning or failed steam traps, which are often sources of energy wastage in steam systems. By repairing or replacing faulty traps, energy losses are minimised, resulting in significant reductions in energy consumption and associated costs.\n\nThis enhanced energy efficiency not only leads to tangible cost savings but also contributes to improved carbon management efforts. Reduced energy usage translates to decreased carbon emissions, supporting the organisation's environmental sustainability goals and regulatory compliance.\n\nMoreover, the optimisation of steam traps improves the overall operational performance of the steam network. Properly functioning traps ensure the efficient and reliable distribution of steam, minimising disruptions and downtime. This enhances productivity by maintaining consistent operational output and reducing the need for costly maintenance interventions.\n\nAdditionally, the proactive approach to steam trap management demonstrates a commitment to operational excellence and resource efficiency. By investing in regular surveys and maintenance, businesses foster a culture of continuous improvement and responsible resource management.\n\nIn summary, conducting a steam trap survey on a steam network offers significant benefits for businesses, including energy savings, cost reduction, improved carbon management, and enhanced operational performance. By prioritising steam trap maintenance and optimisation, organisations can achieve greater efficiency, sustainability, and reliability in their steam systems, positioning themselves for long-term success while minimising environmental impact."
    Subtitle2 = "Hotwell Heat recovery"
    Text2 = "Installing and utilising heat recovery systems on a steam boiler hotwell or condensate return offers a multitude of benefits that significantly impact a business's operations. By capturing and repurposing waste heat, these systems enhance energy efficiency, leading to substantial reductions in energy consumption and associated costs. Recovered heat can be utilised for various purposes such as preheating boiler feedwater or space heating, effectively maximising the energy value of steam generation.\n\nThe integration of heat recovery systems not only lowers operational expenses but also aligns with sustainability goals by reducing the reliance on fossil fuels and minimising greenhouse gas emissions. This proactive approach to energy management contributes to better carbon management practices and environmental stewardship, enhancing the organisation's reputation and regulatory compliance.\n\nFurthermore, the utilisation of recovered heat enhances the operational performance of the steam system. By optimising energy utilisation, businesses can maintain consistent operational output while minimising fuel consumption and emissions. This leads to improved system reliability, reduced downtime, and enhanced productivity.\n\nMoreover, the investment in heat recovery systems demonstrates a commitment to innovation and resource efficiency. By harnessing otherwise wasted heat, businesses can improve their competitiveness and resilience in a dynamic market environment.\n\nIn summary, installing and utilising heat recovery systems on a steam boiler hotwell or condensate return delivers significant benefits for businesses, including energy savings, cost reduction, improved carbon management, and enhanced operational performance. By harnessing waste heat and maximising energy efficiency, organisations can achieve greater sustainability, profitability, and competitiveness, positioning themselves for long-term success while minimising environmental impact."
    Subtitle3 = "Boiler economiser"
    Text3 = "Installing an economiser in a steam boiler presents numerous advantages that profoundly impact a business's operations. Economisers recover waste heat from boiler flue gases, preheating feedwater before it enters the boiler. This process significantly enhances energy efficiency, resulting in substantial reductions in energy consumption and associated costs. By utilising waste heat that would otherwise be lost, businesses can maximize the energy output of their steam systems, leading to significant cost savings over time.\n\nMoreover, the integration of economisers aligns with sustainability goals by reducing the reliance on fossil fuels and minimising greenhouse gas emissions. This proactive approach to energy management fosters better carbon management practices and environmental stewardship, enhancing the organisation's reputation and regulatory compliance.\n\nFurthermore, the utilisation of economisers improves the operational performance of steam systems. Preheating feedwater reduces the workload on the boiler, resulting in improved efficiency, reduced fuel consumption, and extended equipment lifespan. This translates to enhanced system reliability, reduced downtime, and increased productivity, ultimately optimising operational performance.\n\nAdditionally, the investment in economisers demonstrates a commitment to innovation and resource efficiency. By harnessing waste heat effectively, businesses can improve their competitiveness and resilience in a dynamic market environment.\n\nIn summary, installing an economiser in a steam boiler offers significant benefits for businesses, including energy savings, cost reduction, improved carbon management, and enhanced operational performance. By maximising energy efficiency and minimising environmental impact, organisations can achieve greater sustainability, profitability, and competitiveness, positioning themselves for long-term success in the marketplace."
    Subtitle4 = "Automatic blowdown and BG01 compliance controls"
    Text4 = "Upgrading a steam boiler plant's controls to be BG01 compliant offers substantial benefits that positively impact a business's operations. BG01 compliance ensures adherence to best practices and safety standards, enhancing the overall operational efficiency and reliability of the steam boiler system. By upgrading controls to meet BG01 standards, businesses can optimize energy usage, resulting in significant reductions in energy consumption and associated costs.\n\nMoreover, BG01 compliance aligns with sustainability goals by promoting efficient energy management practices. Enhanced control systems enable precise monitoring and adjustment of boiler operations, minimising energy wastage and reducing greenhouse gas emissions. This proactive approach to energy management contributes to improved carbon management practices and environmental stewardship, enhancing the organisation's reputation and regulatory compliance.\n\nFurthermore, upgrading controls to BG01 standards enhances the operational performance of steam boiler plants. Advanced control systems offer greater precision and reliability, ensuring optimal boiler performance and reducing the risk of operational disruptions. This leads to increased system reliability, reduced downtime, and enhanced productivity, ultimately optimising operational performance.\n\nAdditionally, the investment in BG01-compliant controls demonstrates a commitment to safety, efficiency, and innovation. By upgrading controls to meet industry standards, businesses can improve their competitiveness and resilience in a dynamic market environment.\n\nIn summary, upgrading a steam boiler plant's controls to be BG01 compliant offers significant benefits for businesses, including energy savings, cost reduction, improved carbon management, and enhanced operational performance. By prioritising safety and efficiency, organisations can achieve greater sustainability, profitability, and competitiveness, positioning themselves for long-term success in the marketplace."
    Subtitle5 = "Steam pressure optimisation"
    Text5 = "Optimising a steam boiler's output pressure to meet site demands presents numerous benefits that profoundly impact a business's operations. By aligning steam pressure with specific site requirements, businesses can optimize energy usage, resulting in substantial reductions in energy consumption and associated costs. This targeted approach ensures that steam is generated and distributed at the precise pressure needed for various processes, minimising energy wastage and maximising efficiency.\n\nMoreover, optimising steam boiler output pressure aligns with sustainability goals by promoting efficient energy management practices. By reducing unnecessary steam pressure, businesses can lower fuel consumption and greenhouse gas emissions, contributing to improved carbon management practices and environmental stewardship. This proactive approach to energy management enhances the organisation's reputation and regulatory compliance, while also supporting long-term sustainability objectives.\n\nFurthermore, optimising steam boiler pressure improves operational performance by ensuring consistent and reliable steam supply. By meeting site demands accurately, businesses can minimize operational disruptions, reduce downtime, and enhance productivity. This translates to improved overall system reliability and performance, ultimately optimising operational efficiency.\n\nAdditionally, the investment in optimising steam boiler output pressure demonstrates a commitment to innovation and resource efficiency. By leveraging advanced control systems and monitoring technologies, businesses can achieve greater precision and reliability in steam generation processes, improving competitiveness and resilience in the marketplace.\n\nIn summary, optimising a steam boiler's output pressure to properly meet site demands offers significant benefits for businesses, including energy savings, cost reduction, improved carbon management, and enhanced operational performance. By prioritising efficiency and precision, organisations can achieve greater sustainability, profitability, and competitiveness, positioning themselves for long-term success in the marketplace."
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text5)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle5)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
            
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text4)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle4)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text3)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle3)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
            
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
            
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Title)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(14) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)

def ElectricMotors(position):
    placeholderTitle = "{{title" + str(position+1) + "}}"
    placeholderText = "{{text" + str(position+1) + "}}"
    placeholderTable = "{{table" + str(position+1) + "}}"
    placeholderText1 = "{{Text" + str(position+1) + "}}"
    Title = "Site Project: Electric Motors"
    Subtitle = "DC to AC conversion (where appropriate)"
    Text = "Converting existing DC motors to AC motors presents substantial benefits that significantly impact a business's operations. AC motors offer greater energy efficiency compared to DC motors, leading to significant reductions in energy consumption and associated costs. By replacing outdated DC motors with modern AC counterparts, businesses can optimize energy usage, resulting in long-term cost savings and improved operational efficiency.\n\nMoreover, the adoption of AC motors aligns with sustainability goals by promoting energy-efficient technologies. Reduced energy consumption translates to lower greenhouse gas emissions, contributing to improved carbon management practices and environmental stewardship. This proactive approach to energy management enhances the organisation's reputation and regulatory compliance, while also supporting long-term sustainability objectives.\n\nFurthermore, AC motors typically require less maintenance and have longer lifespans compared to DC motors, leading to reduced downtime and lower maintenance costs. This enhances overall operational performance by ensuring consistent and reliable motor performance, ultimately improving productivity and operational efficiency.\n\nAdditionally, the investment in converting existing DC motors to AC motors demonstrates a commitment to innovation and modernisation. By leveraging advanced motor technologies, businesses can achieve greater efficiency and reliability in their operations, improving competitiveness and resilience in the marketplace.\n\nIn summary, converting existing DC motors to AC motors offers significant benefits for businesses, including energy savings, cost reduction, improved carbon management, and enhanced operational performance. By prioritising efficiency and modernisation, organisations can achieve greater sustainability, profitability, and competitiveness, positioning themselves for long-term success in the marketplace."
    Subtitle2 = "\nVSD retrofit"
    Text2 = "Implementing Variable Speed Drive (VSD) retrofits on fixed-speed motors offers numerous benefits that profoundly impact a business's operations. VSDs enable motors to operate at variable speeds based on demand, resulting in significant reductions in energy consumption and associated costs. By retrofitting fixed-speed motors with VSDs, businesses can optimize energy usage, leading to substantial long-term cost savings and improved operational efficiency.\n\nMoreover, the adoption of VSD retrofits aligns with sustainability goals by promoting energy-efficient technologies. Reduced energy consumption translates to lower greenhouse gas emissions, contributing to improved carbon management practices and environmental stewardship. This proactive approach to energy management enhances the organisation's reputation and regulatory compliance while also supporting long-term sustainability objectives.\n\nFurthermore, VSD retrofits enhance operational performance by providing greater flexibility and control over motor speed. By adjusting motor speed to match process requirements, businesses can minimize energy wastage and optimize system performance. This leads to improved productivity, reduced downtime, and enhanced operational efficiency.\n\nAdditionally, the investment in VSD retrofits demonstrates a commitment to innovation and modernisation. By leveraging advanced motor control technologies, businesses can achieve greater efficiency and reliability in their operations, improving competitiveness and resilience in the marketplace.\n\nIn summary, implementing VSD retrofits on fixed-speed motors offers significant benefits for businesses, including energy savings, cost reduction, improved carbon management, and enhanced operational performance. By prioritising efficiency and modernisation, organisations can achieve greater sustainability, profitability, and competitiveness, positioning themselves for long-term success in the marketplace."
    Subtitle3 = "\nEquipment asset register and refit policy/schedule"
    Text3 = "Managing an up-to-date asset register with a replacement plan for electrical motors offers numerous benefits that significantly impact a business's operations. Firstly, maintaining a comprehensive asset register enables businesses to track the condition, performance, and lifecycle of electrical motors accurately. With this information readily available, businesses can plan and execute timely motor replacements, avoiding costly breakdowns and downtime.\n\nBy implementing a replacement plan for electrical motors, businesses can ensure the ongoing reliability and efficiency of their systems. Modern motors are often more energy-efficient than older models, leading to significant reductions in energy consumption and associated costs. This optimisation of energy usage not only leads to cost savings but also aligns with sustainability goals by reducing greenhouse gas emissions and improving carbon management practices.\n\nFurthermore, proactive management of electrical motor assets enhances operational performance by minimising disruptions and maximising uptime. By replacing outdated motors before they fail, businesses can maintain consistent system performance, ultimately improving productivity and operational efficiency.\n\nAdditionally, the investment in managing an up-to-date asset register with a replacement plan demonstrates a commitment to innovation and modernisation. By leveraging advanced motor technologies and maintenance strategies, businesses can achieve greater reliability and resilience in their operations, improving competitiveness in the marketplace.\n\nIn summary, managing an up-to-date asset register with a replacement plan for electrical motors offers significant benefits for businesses, including energy savings, cost reduction, improved carbon management, and enhanced operational performance. By prioritising asset management and maintenance, organisations can achieve greater sustainability, profitability, and competitiveness, positioning themselves for long-term success."
    Subtitle4 = "\nRefit of inefficient motor (comparison between Eff1 &2 to IE 1, 2, 3, 4, 5 etc)"
    Text4 = "Replacing old 'eff' rated motors with modern 'IE' rated motors offers significant benefits that profoundly impact a business's operations. IE-rated motors are designed with advanced technologies to maximize energy efficiency, resulting in substantial improvements in energy consumption. On average, upgrading from 'eff' to 'IE' rated motors can lead to energy efficiency improvements of up to 20%."
    Text5 = "\nThis enhanced energy efficiency translates to significant reductions in energy usage and associated costs for businesses. By replacing outdated motors with IE-rated counterparts, businesses can achieve substantial long-term cost savings, improving overall operational efficiency and competitiveness in the market.\n\nMoreover, the adoption of IE-rated motors aligns with sustainability goals by promoting energy-efficient technologies. Reduced energy consumption not only leads to cost savings but also contributes to improved carbon management practices. By minimising greenhouse gas emissions, businesses can enhance their environmental stewardship and regulatory compliance, positively impacting brand reputation and stakeholder perception.\n\nFurthermore, the investment in replacing old 'eff' rated motors with modern 'IE' rated motors enhances operational performance by ensuring reliable and efficient motor operation. IE-rated motors are designed to deliver consistent performance and reliability, minimising downtime and maximising productivity.\n\nIn summary, replacing old 'eff' rated motors with modern 'IE' rated motors offers significant benefits for businesses, including energy savings, cost reduction, improved carbon management, and enhanced operational performance. By prioritising energy efficiency and modernisation, organisations can achieve greater sustainability, profitability, and competitiveness, positioning themselves for long-term success in the marketplace."
    image_data1 = "G:\\.shortcut-targets-by-id\\1DDDepdM3lG41WX_pPjId0_Gdkc23PnIs\\Energy\\EMT\\Energy Projects\\Team\\1 - Team Members\\Analytics & Reporting Team\\Jack Berry\\Python\\Testing\\PythonCodeOrganised\\AutoReportResources\\ss4.png"
    image_data2 = "G:\\.shortcut-targets-by-id\\1DDDepdM3lG41WX_pPjId0_Gdkc23PnIs\\Energy\\EMT\\Energy Projects\\Team\\1 - Team Members\\Analytics & Reporting Team\\Jack Berry\\Python\\Testing\\PythonCodeOrganised\\AutoReportResources\\ss5.png"
    image_data3 = "G:\\.shortcut-targets-by-id\\1DDDepdM3lG41WX_pPjId0_Gdkc23PnIs\\Energy\\EMT\\Energy Projects\\Team\\1 - Team Members\\Analytics & Reporting Team\\Jack Berry\\Python\\Testing\\PythonCodeOrganised\\AutoReportResources\\ss6.png"
    blank = ""
    for index, paragraph in enumerate(doc.paragraphs):
       if placeholderText1 in paragraph.text:
           new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text5)
           run = new_paragraph.runs[0]
           run.font.name = 'Arial'  
           run.font.size = Pt(10)
           new_paragraph.alignment = 0
           
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText1 in paragraph.text:
            paragraph = doc.paragraphs[index + 1].insert_paragraph_before(blank)
            run = paragraph.add_run()
            run.add_picture(image_data3, width=Inches(4)) 
            paragraph.alignment = 1
    for paragraph in doc.paragraphs:
        if placeholderTable in paragraph.text:
            table = doc.add_table(1, 2)
            cell = table.cell(0, 0)
            cell_paragraph = cell.paragraphs[0]
            run = cell_paragraph.add_run()
            run.add_picture(image_data1, width=Inches(1.5),height=Inches(3)) 
            cell_paragraph.alignment = 1
            cell = table.cell(0, 1)
            cell_paragraph = cell.paragraphs[0]
            run = cell_paragraph.add_run()
            run.add_picture(image_data2, width=Inches(1.5),height=Inches(3))  
            cell_paragraph.alignment = 1
            table.alignment = 1
            move_table_after(table, paragraph) 
            break
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text4)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle4)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text3)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle3)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
            
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
            
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Title)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(14) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)  

    

def CompressedAir(position):
    placeholderTitle = "{{title" + str(position+1) + "}}"
    placeholderText = "{{text" + str(position+1) + "}}"
    Title = "Site Project: Compressed air system optimisation"
    subtitlenew = "Compressed air system optimisation"
    textnew = "There are several areas which we will be looking to review when assessing your compressed air usage on site.\n\n1. Control and Zoning of compressed air – As the use of compressed air varies in its required pressure and application across the site It would be beneficial to separate your compressed air circuit by Zone. This will also need to better controlled and lead to less waste by only pressurising the parts of site you require at any given time.\n\n2. Leak detection, tagging and intervention – <<<When reviewing the site there was no clear indication of air leaks being identified, tagged or acted on.>>> Air leaks will lead to your system pressure being higher, compressors working harder and equipment failure over time.\n\n3. System pressure – <<<The site has quite a high-pressure requirement due to the length of compressed air runs, leaks and could do with addressing some of these issues before testing how the impact of lower pressure impacts production quality.>>>\n\n4. Compressor servicing & refit planning – <<<As your site has a very high demand for compressed air it is more than likely the equipment is operating outside of its expected life cycle hours.>>> Even if this is not the case a plan should be made to effectively size new energy efficient compressors for site once the above points have all been addressed.\n\nUntil the submetering has determined the kWh of energy going to the compressors we have assumed a 1% reduction of electrical usage on site which would relate directly to the successful completion of these projects."
    Subtitle = "Air Leak Detection and subsequent remedial works"
    Text = "A compressed air leak detection survey and subsequent correction work offer significant benefits across multiple aspects of a business's operations. Firstly, by identifying and rectifying leaks, energy wastage is curtailed, leading to substantial reductions in energy consumption. This not only lowers operational costs but also aligns with sustainability goals, thereby enhancing carbon management efforts. Addressing leaks promptly minimizes greenhouse gas emissions, contributing positively to the organisation's environmental footprint and regulatory compliance.\n\nMoreover, the financial savings resulting from reduced energy usage are considerable. Businesses can redirect these cost savings towards other strategic initiatives, boosting overall profitability and competitiveness in the market. Additionally, improved energy efficiency enhances operational performance by ensuring a consistent and reliable compressed air supply. This, in turn, reduces downtime associated with equipment failures and maintenance, thereby optimising productivity and operational uptime.\n\nFurthermore, the proactive approach to air leak detection and correction demonstrates a commitment to operational excellence and responsible resource management. It fosters a culture of efficiency and environmental stewardship within the organisation, which can enhance brand reputation and stakeholder trust.\n\nOverall, investing in compressed air leak detection surveys and subsequent corrective actions yields a myriad of benefits for businesses. From significant energy savings and cost reduction to enhanced carbon management and operational performance, the positive impacts extend across financial, environmental, and operational dimensions, positioning the business for long-term success and sustainability."
    Subtitle2 = "Controls Optimisation"
    Text2 = "Control optimisation for a compressed air circuit offers multifaceted benefits that positively impact various aspects of a business's operations. By fine-tuning control settings, the system operates more efficiently, leading to notable reductions in energy consumption. This enhanced energy efficiency not only lowers operational costs but also aligns with sustainability goals, facilitating better carbon management practices.\n\nThe optimisation process ensures that the compressed air system operates at its peak performance levels, resulting in minimised energy wastage and improved overall system efficiency. As a result, businesses experience significant cost reductions associated with energy consumption, allowing for the reallocation of resources towards strategic initiatives.\n\nMoreover, by reducing energy usage and associated emissions, control optimisation contributes to a greener operational footprint, aligning with environmental regulations and corporate sustainability objectives. This proactive approach to energy management bolsters the organisation's reputation as an environmentally responsible entity, enhancing brand image and stakeholder perception.\n\nOperationally, optimised control settings lead to enhanced reliability and consistency in compressed air supply, reducing downtime and maintenance requirements. This, in turn, improves overall operational performance and productivity, ensuring uninterrupted workflow and maximising equipment longevity.\n\nIn conclusion, control optimisation for compressed air circuits delivers a range of benefits for businesses, including energy savings, cost reduction, improved carbon management, and enhanced operational performance. By investing in optimisation initiatives, organisations can achieve a more sustainable and efficient compressed air system, positioning themselves for long-term success in a competitive market while minimising their environmental impact."
    Subtitle3 = "Pressure optimisation"
    textnew2 = "Installing heat recovery on a compressed air circuit offers significant benefits to manufacturing sites, positively impacting energy efficiency, cost reduction, carbon management, and operational performance. Heat recovery systems capture waste heat generated during compressed air production and repurpose it for various heating applications, such as space heating or preheating water.\n\nBy utilizing waste heat, heat recovery systems improve energy efficiency by reducing the need for additional energy sources for heating purposes. This results in lower energy consumption and operational costs, leading to significant cost savings for manufacturing sites. Additionally, the efficient use of waste heat contributes to reduced carbon emissions, aligning with sustainability goals and enhancing carbon management efforts.\n\nFurthermore, heat recovery systems enhance operational performance by optimizing the utilization of resources. By repurposing waste heat, these systems ensure that energy is utilised effectively, minimizing waste and improving overall system reliability. This leads to improved productivity and reduced downtime, ultimately enhancing operational efficiency.\n\nMoreover, the installation of heat recovery systems demonstrates a commitment to environmental stewardship and resource efficiency. By harnessing waste heat and minimizing energy consumption, manufacturing sites can reduce their environmental footprint and improve their standing in regulatory compliance.\n\nIn summary, installing heat recovery on a compressed air circuit brings significant benefits to manufacturing sites, including improved energy efficiency, cost reduction, carbon management, and operational performance. By prioritizing the utilization of waste heat, businesses can achieve greater sustainability, profitability, and competitiveness, positioning themselves for long-term success in the marketplace."
    subtitlenew2 = "Heat Recovery"
    Text3 = "Optimising the pressure of compressed air circuits presents significant advantages across various facets of a business's operations. By fine-tuning pressure settings, the system operates more efficiently, resulting in reduced energy consumption and associated costs. This enhanced energy efficiency not only leads to tangible cost savings but also aligns with sustainability objectives, fostering better carbon management practices.\n\nA well-optimised pressure system ensures that compressed air is delivered at the appropriate levels required for specific applications, minimising unnecessary energy expenditure. As a result, businesses experience substantial reductions in energy usage and operational expenses, allowing for resource reallocation towards strategic endeavours.\n\nFurthermore, optimising pressure settings contributes to a greener operational footprint by reducing energy consumption and associated carbon emissions. This proactive approach to energy management enhances the organisation's environmental credentials, bolstering brand reputation and stakeholder confidence.\n\nOperationally, optimised pressure levels lead to improved system reliability and consistency in compressed air supply. This translates to reduced downtime, enhanced productivity, and minimised maintenance requirements, thereby optimising operational performance.\n\nIn summary, the optimisation of compressed air circuit pressure yields significant benefits for businesses, including energy savings, cost reduction, improved carbon management, and enhanced operational performance. By investing in pressure optimisation initiatives, organisations can achieve greater efficiency and sustainability in their compressed air systems, positioning themselves for long-term success while minimising environmental impact."
    Subtitle4 = "Hardware assessment upgrade and Refit"
    Text4 = "Conducting a hardware assessment and upgrading or refitting compressors within a compressed air system offers substantial benefits across various dimensions of a business's operations. Firstly, by assessing the existing hardware, businesses gain insights into inefficiencies and opportunities for improvement. Upgrading or refitting compressors to modern, energy-efficient models enhances the system's overall energy efficiency, resulting in significant reductions in energy consumption and associated costs.\n\nThe adoption of newer compressor technologies not only lowers operational expenses but also aligns with sustainability goals, fostering better carbon management practices. Reduced energy usage leads to decreased carbon emissions, contributing to a greener operational footprint and regulatory compliance.\n\nFurthermore, the investment in compressor upgrades or refits translates into improved operational performance. Modern compressors are designed to deliver optimal performance levels, ensuring reliable and consistent compressed air supply. This enhances productivity by minimising downtime and maintenance requirements, thereby optimising overall operational efficiency.\n\nIn addition to tangible cost savings and enhanced operational performance, compressor upgrades or refits demonstrate a commitment to innovation and continuous improvement. This proactive approach to equipment management enhances the organisation's competitiveness and resilience in a dynamic market environment.\n\nIn summary, conducting a hardware assessment and upgrading or refitting compressors within a compressed air system delivers significant benefits for businesses, including energy savings, cost reduction, improved carbon management, and enhanced operational performance. By investing in compressor upgrades or refits, organisations can achieve greater efficiency, sustainability, and competitiveness, positioning themselves for long-term success while minimising environmental impact."
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text4)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle4)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)

    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(textnew2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(subtitlenew2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text3)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle3)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
            
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(textnew)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
       
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(subtitlenew)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Title)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(14) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74) 
            
          
def ISO(position):
    placeholderTitle = "{{title" + str(position+1) + "}}"
    placeholderText = "{{text" + str(position+1) + "}}"
    Title = "ISO 50001 Energy"
    Text1 = "ISO 50001 Energy Management Systems is an international standard for energy efficiency and continuous improvement. From the same family of ISO standards as ISO 9001 Quality Management Systems and ISO 14001 environmental management systems, ISO 50001 provides a framework for the improvement of the business processes and procedures to ensure that energy efficiency is a key focus for the organisation.\n \nBusinesses with ISO 50001 standard perform better in energy efficiency improvements, and the resulting carbon emission savings, over other continuous improvement schemes this is because they must meet annually reviewed targets to remain certified within the framework. An example below from Schneider Electric and 3M compared their facilities with and without ISO 50001 certification and followed a Superior Energy Performance (SEP) energy efficiency program that takes ISO 50001 further. Creating the system can take 9 – 12 Months for businesses which have existing ISO frameworks and up to 18 months for those without."
    Text2 = "\nThe cost outlined here is the estimation of an external auditing team implementing the changes and signing off the groups ISO accreditation the equivalent of ~ 2 – 3 days per month dedicated to their clients. This delivery can take 9 – 12 Months for businesses which have existing ISO frameworks and up to 18 months for those without."
    subtitle = "Energy monitoring and targeting"
    subtitle2 = "Staff Training & Awareness materials"
    Text3 = "Submetering on electrical circuits is useful to split out consumption by area, business purpose or time of day, as well as identifying opportunities for energy efficiency improvements. Without it, the whole site’s consumption is mixed and it can make justifying investment in individual machines and areas difficult. From this data any unnecessary or excessive electricity use may be investigated, identified and either reduced or eliminated. Active use of such systems aligned with Metering Monitoring and Targeting can lead to a reduction in annual electricity consumption by a conservative 3 - 5%. Following implementation of changes or projects can then be monitored and targets set to gauge the performance and inform further action."
    Text4 = "Staff at different levels of authority and different departments will have differing training requirements to ensure they are all acting on whatever energy reduction opportunities they can observe. \n\nFor example, the senior management and the engineering department might require training on the application of monitoring and targeting energy systems. Building occupants might need to increase their awareness and understanding of how they can directly impact the energy and carbon emissions of the site by making small changes in their day-to-day routines. Engineering staff might require specific and semi-regular training that relates to best industry practices, development of more efficient technologies for use on-site, etc.\n\nThis will be a project which follows on from the implementation of a company-wide energy policy and energy management system. It is advised that an initial training session be provided for the senior leadership team and with this team identify key members of staff and disseminate throughout departments. We would then develop bespoke training materials for these teams and supporting awareness materials to be published in appropriate areas for the business such as notice boards, staff intranet, machinery, or break rooms."
    imagepath = ("G:\\.shortcut-targets-by-id\\1DDDepdM3lG41WX_pPjId0_Gdkc23PnIs\\Energy\\EMT\\Energy Projects\\Team\\1 - Team Members\\Analytics & Reporting Team\\Jack Berry\\Python\\Testing\\PythonCodeOrganised\\AutoReportResources\\ISOpicture.png")
    blank = ""
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text4)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(subtitle2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text3)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(subtitle)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            paragraph = doc.paragraphs[index + 1].insert_paragraph_before(blank)
            run = paragraph.add_run()
            run.add_picture(imagepath, width=Inches(5)) 
            paragraph.alignment = 1
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text1)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Title)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(14) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)

    
        
def EnergyPolicyfn(position):
    placeholderTitle = "{{title" + str(position+1) + "}}"
    placeholderText = "{{text" + str(position+1) + "}}"
    Title = "Site Project: Energy Policy & Energy management SOPs"
    Staff_Training1 = "The initial and most important part of this process is the site energy assessment and opportunity Audit. We would look to spend half a day on-site with key staff members (Site Manager’s, Engineering leads, maintenance, shift managers, etc) and review the site thoroughly through an energy performance lens.\n\nIt is normally identified at this stage that not all staff have a complete understanding of how and why energy management is important for the business and what it means in terms of how Eden Farm staff interact with the facilities. The key way of communicating this both internally and externally is to develop an energy management policy and, for staff, introducing standard operating procedures which relate directly to their production processes where they use energy-consuming equipment.\n\nTo develop an energy policy, we would advise several meetings to be undertaken by senior management to determine the company's objectives concerning Energy Management. These meetings can be used to scope out key targets and deliverables that the company want to reach. We would then advise management and engineering teams come together to review the findings of the energy audits and identify what options are viable within any budgeting constraints. From this, we can form a list of actions that can be delivered to meet the management objectives or provide a gap analysis to request additional budget to meet these objectives.\n\nThis will usually take around four weeks of full-time delivery, depending on the complexity."
    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Staff_Training1)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    # TITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Title)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(14) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
            
def HVAC(position):
    placeholderTitle = "{{title" + str(position+1) + "}}"
    placeholderText = "{{text" + str(position+1) + "}}"
    Title = "HVAC controls"
    Subtitle1 = "Hotel example"
    Text1 = "Many hotels are set up as either a two-pipe system or, a more flexible, four-pipe system.  With a two-pipe system, the rooms are in either heating mode or cooling mode.  The changeover from heating to cooling or vice versa is made manually, using the thermostat and there is always the possibility that unusual weather patterns might cause some occupant discomfort. There is no way in this hotel to ensure that all rooms are set to the same temperature as all thermostatic controls are manual rather than electronic. \n\nIt is important to be able to set set-back points and common temperature dead bands. CIBSE Best Practice suggests comfortable temperature bands be set in common between >>> 19 OC – 24OC, for Hospitality settings <<<. With this set-up, once an occupant has checked out there should be a SOP in place for a team member to reset the thermostat in the room and ensure all power is off.\n\nEstimated Savings 5% - 10% Electricity & Gas (£, kWh, TCO2)\n\nEstimated Investment - Depends on system capabilities."
    Subtitle2 = "\nMSA example"
    Subtitle3 = "Basic controls: Temperature set points"
    subtitlenew = "Office"
    textnew = "Where occupants have access to HVAC controls, it is important to have set-back points and common temperature dead bands to prevent energy waste. CIBSE Best Practice suggests comfortable temperature bands be set between 19C – 23C for office settings where there is minimal activity. In hallways this can be lowered to 13C – 20C. For thermostats with “summer” and “winter” settings, the summer setting can be on the higher end of 23C – 25C, and winter 19C – 21C."
    Text2 = "Where occupants have access to HVAC controls it is important to be able to set set-back points (revert settings after a specified period of time) and common temperature dead bands for example in meeting rooms or occasional use areas. CIBSE Best Practice suggests comfortable temperature bands be set between <<< 19OC – 24OC, for hospitality settings >>>. With existing controls, once an occupant has left there should be a standard operating procedure (SOP) in place for a team member to reset the thermostat in the room and ensure all power is off.\n\n<<< During the site visit, the thermostats were found in a room with access limited to managers so this relies on the managers following the SOP. The controls generally allowed for a “summer” and “winter” option, so it would be advisable to set the “summer” temperature to 24oC and “winter” temperature to 19oC so that during milder days the system won’t be constantly switching between heating and cooling. >>> \n\nIf there are complaints, they should be investigated to ensure the HVAC is working optimally. For example if the thermostat location is far away from the HVAC ducts, it may not be very responsive to changes in the main trading areas.\n\nIt is however possible to draw comparisons from the sites that have similar ages and layouts and see if applying the same control settings yields the same results in terms of comfort and energy use. However, it may not be possible to achieve such low energy intensity when compared to newer buildings thanks to the building fabric.\n\n<<< For example out of Baldock, Peterborough, and Cambridge, Baldock has the lowest electricity intensity 188 kWh/sqm compared to 229 kWh/sqm and 244 kWh/sqm respectively. Assuming that HVAC contributes 55% to electricity demand based on Baldock’s submetering data, if Peterborough and Cambridge could use the same amount of electricity for HVAC it could reduce the use by 141,292 kWh. The cost of implementation may be as simple as changing the temperatures. Of course HVAC is not just about temperature, but also air changes and ventilations so that may also contribute to the difference in energy consumption. >>>\n\nFor the most complex systems, it may be required that an M&E or BMS contractor, spend time investigating the site to help determine the current capabilities and limits of the existing system and its BMS systems."
 
    Subtitle4 = "\nChanges to ventilation during covid-19 pandemic"
    Text3 = "During the covid-19 pandemic, there were recommendations for higher ventilation rates and turning off thermal wheels. These settings may not have been changed as restrictions were lifted. As a rule of thumb, a 20% reduction in fan speed, can halve the power consumed so it is important to make sure that is minimised whilst maintaining air quality and following health and safety protocols. \n\nCIBSE recommends > 5 air changes per hour for toilers and in commercial buildings 8 litres per second per person. The BMS controls engineer should check the airflow in different areas meet these recommendations and reconnect heat recovery systems. There may be a callout charge for this, assuming it is £12k, this would need to save just 1% of energy costs (at 24p/kWh) to break even in one year. In terms of reducing the fan speed, this is equivalent to just 0.4% reduction which may not be noticeable to occupants.\n\nThere will be a need to complete an airflow analysis and depending on whether it can be controlled by the existing BMS, it may not be possible. It may require more investigation into the motors, or replacing motor controls. This would increase implementation time as it’s longer to assess, make appropriate changes and incur additional costs."
    Subtitle5 = "\nFurther controls and optimisation"
    Text4 = "There are retrofit controls available on the market such as SmartCool. It has shown with energy monitoring that it can reduce 15-20% electricity usage in cooling systems by monitoring the load on compressors and reducing their run hours without affecting the delivered comfort temperature. This is different from typical BMS which is controlled by the observed temperature from a thermostat."
    Subtitle6 = "\nBMS Controls and Monitoring"
    Text5 = "Building management systems (BMS) are integral to controlling and monitoring energy consumption. A good BMS can combine sensors, time and day settings, as well as operational factors into one control and monitoring system. Features can vary to include remote access which reduces lead times for changing set points and usually comes with remote monitoring.  >>> Sites such as hospitality and retail where the occupants are not responsible for energy will struggle with balancing customer experience, health and safety and energy consumption without automated controls in place. In an ideal world for these sites, the lighting and HVAC require as little intervention as possible with scheduled reviewing of the set points and energy usage. <<<\n\nSystems across estates vary in age and features and this is the usual cause of variable energy intensities. It is easier and more efficient to ensure settings are adhered to by deploying remote access and monitoring. The savings by implementing controls can vary widely and the best results are usually when these systems work in conjunction with other measures.\n\nTo fully assess any proposal, for improving or upgrading BMS controls on HVAC systems it would be important to understand the extent of the controls vs the hardware. For example, if there is no variable speed drive on ventilation, then even the best remote controls can only turn the system on or off, without any consideration for the demand, e.g. more footfall, product throughput, processed material, or frequency doors are open (which would bring in fresh air anyway)."
    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text5)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle6)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    # TEXT        
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text4)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle5)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    # TEXT        
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text3)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle4)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    # TEXT        
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle3)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(14) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    # TEXT        
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(textnew)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(subtitlenew)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    # TEXT        
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text1)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle1)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    # TITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Title)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(14) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)

def Lighting(position):
    placeholderTitle = "{{title" + str(position+1) + "}}"
    placeholderText2 = "{{Text" + str(position+1) + "}}"
    placeholderTable = "{{table" + str(position+1) + "}}"
    blank =""
    Title = "Site project: Lighting management"
    Subtitle1 = "Lighting and Controls Upgrades"
    subtitlenew = "LED Lighting"
    text1 = "As of January 2024, it is against the law for wholesalers to sell Fluorescent lighting in the UK. This is spurring another phase of site-wide LED refits. Transitioning to LED from other light sources is always energy-saving and therefore cost-saving. Below is a table to illustrate the power usage for the same light output, showing at least 82% savings. During the audit, this was observed through the colour and temperature of the bulbs. The maintenance team should be made aware of the lower running costs of using the LED bulbs which would quickly negate the cost of buying LED bulbs instead of using old stock."
    text2 = "Across the site there are different lighting levels, from <<< 300 lux to 800 lux >>> for detailed design quality check therefore it is important to turn off lighting when not in use. If the majority of the lighting is just manually switched all day then there are opportunities for energy saving. Consideration must be undertaken here for things such as H&S and Quality assurance areas on site but a thorough review should be made.\n\nIn some areas the lighting levels are above the minimum Heath and Safety Executive (HSE) and CIBSE recommendations, for example, 600 lux on stairs compared to 20 - 50 for corridors is the recommendation; and 500 to 800 lux in quality and product rooms which do require the perception of fine detail. However, this is higher than the lighting used in the design studios and offices. Reducing excessive lighting will save energy however ensuring minimum levels are met is important to reduce eye strain and risk of trips and falls."
    image_data = "G:\\.shortcut-targets-by-id\\1DDDepdM3lG41WX_pPjId0_Gdkc23PnIs\\Energy\\EMT\\Energy Projects\\Team\\1 - Team Members\\Analytics & Reporting Team\\Jack Berry\\Python\\Testing\\PythonCodeOrganised\\AutoReportResources\\ss1.png"
    Subtitle2 = "Lighting: Daylight controls"
    text3 = "Daylight harvesting controls optimize lighting systems by adjusting artificial light levels in response to natural daylight, offering several benefits. Firstly, they significantly reduce energy consumption and associated costs by dimming or switching off lights when sufficient natural light is available. This also extends the lifespan of lighting fixtures, reducing maintenance needs and replacement costs. Additionally, daylight harvesting enhances occupant comfort and productivity by providing consistent and appropriate lighting levels throughout the day. Furthermore, it contributes to sustainability efforts, lowering carbon emissions and promoting environmentally friendly practices. Overall, daylight harvesting controls offer a cost-effective, efficient, and environmentally conscious approach to lighting management.\n\nThe controls at your site will need to be considered, in the short term, the time clocks could be adjusted to sunset time, however, lighting levels might be insufficient when there are dark clouds. Installing daylight sensors would increase the automation of this, though it might have a long ROI and needs to be thoroughly investigated with a lighting specialist to ensure the lighting levels are comfortable. "

    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText2 in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(text3)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0   
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText2 in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    # IMAGE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText2 in paragraph.text:
            paragraph = doc.paragraphs[index + 1].insert_paragraph_before(blank)
            run = paragraph.add_run()
            run.add_picture(image_data, width=Inches(5)) 
            paragraph.alignment = 1       
    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText2 in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(text2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    for index, paragraph in enumerate(doc.paragraphs):        
        if placeholderTable in paragraph.text:
            table = doc.add_table(6, 4)
            table.style='Table Grid'
            heading_cells=table.rows[0].cells
            heading_cells[0].text="Lumens (Brightness)"
            heading_cells[1].text='LED Watts'
            heading_cells[2].text='% Saving'
            heading_cells[3].text='Incandescent Watts'
            row1=table.rows[1]
            row1.cells[0].text="450"
            row1.cells[1].text='6.5'
            row1.cells[2].text="84%"
            row1.cells[3].text="40"
            row1=table.rows[2]
            row1.cells[0].text='700'
            row1.cells[1].text= "8.5"
            row1.cells[2].text= "86%"
            row1.cells[3].text= "60"
            row1=table.rows[3]
            row1.cells[0].text='1200'
            row1.cells[1].text= "12.5"
            row1.cells[2].text= "83%"
            row1.cells[3].text= "75"
            row1=table.rows[4]
            row1.cells[0].text='1575'
            row1.cells[1].text= "17"
            row1.cells[2].text= "83%"
            row1.cells[3].text= "100"
            row1=table.rows[5]
            row1.cells[0].text='2700'
            row1.cells[1].text= "27.5"
            row1.cells[2].text= "82%"
            row1.cells[3].text= "150"
            move_table_after(table, paragraph) 

    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(text1)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(subtitlenew)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle1)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    # TITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Title)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(14) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    
        

def GasBoilerHotWater(position):
    placeholderTitle = "{{title" + str(position+1) + "}}"
    placeholderText = "{{text" + str(position+1) + "}}"
    placeholderText2 = "{{Text" + str(position+1) + "}}"
    placeholderTable = "{{table" + str(position+1) + "}}"
    placeholderTable2 = "{{Table" + str(position+1) + "}}"
    Title = "Gas Boiler Phase Out for hot water"
    Text1 = "To reduce and eliminate Scope 1 carbon emissions from natural gas, water boiler systems will need to be phased out and replaced with an electric system. This will be expensive and may require additional electric supply capacity. The basic idea is to invest in electric immersion heating units or install a new air source heat pump, space permitting, to heat a water tank / calorifier tank to initially pre-heat the water before the gas boilers and then eventually replace it completely. This is a complex project and would require a full engineering team assessment and scoping piece of work. The analysis and justification for operating such a system is reviewed here. \n\nAn Air-Water Heat pump will not provide high enough flow temperatures to replace a boiler directly. These generally give an average flow temperature of ~55 degrees. As such to replace a boiler you have to have a second-stage Water-Water Heat pump & Electric immersion storage tanks. To compare the operating costs of such a system an energy balance comparison between the two setups has been conducted:\n\n1. Two-stage fully electric DHW provision - 100% Carbon offset\n\n2. Single-stage, Hot water economiser system for a boiler - 30% Carbon offset"
    Text2 = "The analysis I've used is based on thermodynamic energy flow Q = m x c x dT, where:\n\nQ= energy\n\nm = mass of working fluid\n\nc = Specific heat capacity\n\ndT = Change in temperature\n\n\nThe key takeaway here is that both these systems will see an increase in the energy use of the DHW system however they will also see a decrease in the contributing carbon emissions of the DHW. This is something that is known as 'the Green Premium' the extra cost of doing something using current green technologies"
    Text3 = "\nNB: This will only be a carbon reduction project if the company is on a Green Electricity tariff."
    
     # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
         if placeholderText in paragraph.text:
             new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text1)
             run = new_paragraph.runs[0]
             run.font.name = 'Arial'  
             run.font.size = Pt(10)
             new_paragraph.alignment = 0         
    
    for index, paragraph in enumerate(doc.paragraphs):        
        if placeholderTable in paragraph.text:
            table = doc.add_table(5, 9)
            table.style='BWSv3'
            cell1 = table.cell(0, 1)
            cell2 = table.cell(0, 2)
            cell3 = table.cell(0, 3)
            cell4 = table.cell(0, 4)
            cell5 = table.cell(0, 5)
            cell1.merge(cell2)
            cell1.merge(cell3)
            cell1.merge(cell4)
            cell1.merge(cell5)
            heading_cells=table.rows[0].cells
            heading_cells[0].text="Fully Electric System % Change in cost"
            heading_cells[1].text='347%            100% reduction in Carbon'
            row1=table.rows[1]
            row1.cells[0].text=""
            row1.cells[1].text='Q (kWh)'
            row1.cells[2].text="m (kg)"
            row1.cells[3].text="Cp (kJ/kgK)"
            row1.cells[4].text="Flow temp (degrees)"
            row1.cells[5].text="Return temp (degrees)"
            row1.cells[6].text="Dt(k)"
            row1.cells[7].text="System Efficiency"
            row1.cells[8].text="Input kWh"
            row1=table.rows[2]
            row1.cells[0].text='Air to water stage'
            row1.cells[1].text= "12.7"
            row1.cells[2].text= "1000.0"
            row1.cells[3].text= "1.0"
            row1.cells[4].text= "55.0"
            row1.cells[5].text= "10.0"
            row1.cells[6].text= "45.0"
            row1.cells[7].text= "3.0"
            row1.cells[8].text= "4.2"
            row1=table.rows[3]
            row1.cells[0].text='Water to water stage'
            row1.cells[1].text= "29.2"
            row1.cells[2].text= "1000.0"
            row1.cells[3].text= "4.2"
            row1.cells[4].text= "80.0"
            row1.cells[5].text= "55.0"
            row1.cells[6].text= "25.0"
            row1.cells[7].text= "0.5"
            row1.cells[8].text= "58.3"
            row1=table.rows[4]
            row1.cells[0].text='Boiler comparison'
            row1.cells[1].text= "81.7"
            row1.cells[2].text= "1000.0"
            row1.cells[3].text= "4.2"
            row1.cells[4].text= "80.0"
            row1.cells[5].text= "10.0"
            row1.cells[6].text= "70.0"
            row1.cells[7].text= "1.8"
            row1.cells[8].text= "46.7"
            move_table_after(table, paragraph)
            
            # FORMAT 
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[0]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[1]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[2]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[3]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[4]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[5]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[6]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[7]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[8]._tc.get_or_add_tcPr().append(shading_elm_1)
            cell = table.cell(0,0)
            cell.paragraphs[0].style = "TableHeader"
            cell = table.cell(1,1)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,2)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,3)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,4)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,5)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,6)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,7)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,8)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,0)
            cell.paragraphs[0].style = "LeftColumn"
            cell = table.cell(2,0)
            cell.paragraphs[0].style = "LeftColumn"
            cell = table.cell(3,0)
            cell.paragraphs[0].style = "LeftColumn"
            cell = table.cell(0,1)
            cell.paragraphs[0].style = "Body Text"
            for i in [1,2,3,4,5,6,7,8]:
                for j in range(2,5):
                    cell = table.cell(j,i)
                    cell.paragraphs[0].style = "TableCentred"
            break
    for index, paragraph in enumerate(doc.paragraphs):        
        if placeholderTable2 in paragraph.text:
            table = doc.add_table(5, 9)
            table.style='BWSv3'
            cell1 = table.cell(0, 1)
            cell2 = table.cell(0, 2)
            cell3 = table.cell(0, 3)
            cell4 = table.cell(0, 4)
            cell5 = table.cell(0, 5)
            #cell6 = table.cell(0, 6)
            cell1.merge(cell2)
            cell1.merge(cell3)
            cell1.merge(cell4)
            cell1.merge(cell5)
            heading_cells=table.rows[0].cells
            heading_cells[0].text="Hybrid Electric system % Change in cost"
            heading_cells[1].text='162%            30.5% reduction in Carbon'
            row1=table.rows[1]
            row1.cells[0].text=""
            row1.cells[1].text='Q (kWh)'
            row1.cells[2].text="m (kg)"
            row1.cells[3].text="Cp (kJ/kgK)"
            row1.cells[4].text="Flow temp (degrees)"
            row1.cells[5].text="Return temp (degrees)"
            row1.cells[6].text="Dt(k)"
            row1.cells[7].text="System Efficiency"
            row1.cells[8].text="Input kWh"
            row1=table.rows[2]
            row1.cells[0].text='Air to water stage'
            row1.cells[1].text= "12.7"
            row1.cells[2].text= "1000.0"
            row1.cells[3].text= "1.0"
            row1.cells[4].text= "55.0"
            row1.cells[5].text= "10.0"
            row1.cells[6].text= "45.0"
            row1.cells[7].text= "3.0"
            row1.cells[8].text= "4.2"
            row1=table.rows[3]
            row1.cells[0].text='Boiler stage'
            row1.cells[1].text= "29.2"
            row1.cells[2].text= "1000.0"
            row1.cells[3].text= "4.2"
            row1.cells[4].text= "80.0"
            row1.cells[5].text= "55.0"
            row1.cells[6].text= "25.0"
            row1.cells[7].text= "0.9"
            row1.cells[8].text= "32.4"
            row1=table.rows[4]
            row1.cells[0].text='Boiler'
            row1.cells[1].text= "81.7"
            row1.cells[2].text= "1000.0"
            row1.cells[3].text= "4.2"
            row1.cells[4].text= "80.0"
            row1.cells[5].text= "10.0"
            row1.cells[6].text= "70.0"
            row1.cells[7].text= "1.8"
            row1.cells[8].text= "46.7"
            move_table_after(table, paragraph)
            
            # FORMAT 
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[0]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[1]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[2]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[3]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[4]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[5]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[6]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[7]._tc.get_or_add_tcPr().append(shading_elm_1)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="black"/>'.format(nsdecls('w')))
            table.rows[1].cells[8]._tc.get_or_add_tcPr().append(shading_elm_1)
            cell = table.cell(0,0)
            cell.paragraphs[0].style = "TableHeader"
            cell = table.cell(1,1)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,2)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,3)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,4)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,5)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,6)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,7)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,8)
            cell.paragraphs[0].style = "BoldCentre"
            cell = table.cell(1,0)
            cell.paragraphs[0].style = "LeftColumn"
            cell = table.cell(2,0)
            cell.paragraphs[0].style = "LeftColumn"
            cell = table.cell(3,0)
            cell.paragraphs[0].style = "LeftColumn"
            cell = table.cell(0,1)
            cell.paragraphs[0].style = "Body Text"
            for i in [1,2,3,4,5,6,7,8]:
                for j in range(2,5):
                    cell = table.cell(j,i)
                    cell.paragraphs[0].style = "TableCentred"
            break
    for index, paragraph in enumerate(doc.paragraphs):
         if placeholderText2 in paragraph.text:
             new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text3)
             run = new_paragraph.runs[0]
             run.font.name = 'Arial'  
             run.font.size = Pt(10)
             run.font.bold = True
             new_paragraph.alignment = 0
    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText2 in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Text2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0    
    
    # TITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Title)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(14) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)


def PowerQuality(position):
    placeholderTitle = "{{title" + str(position+1) + "}}"
    placeholderText2 = "{{Text" + str(position+1) + "}}"
    placeholderTable2 = "{{Table" + str(position+1) + "}}"
    Title = "Site project: Power Quality"
    Subtitle1 = "Power Factor Correction"
    text1 = "Power factor (PF) is one indicator of power quality, it describes the relationship between the power used by your electrical equipment and provides useful output, known as “real” power, and power that is consumed but isn’t used directly, known as reactive power. Collectively, they make up the apparent power of a site, with the ratio between real and apparent power being the power factor. A typical power factor for a site is between 80% and 90% efficiency or PF = 0.8 to 0.9. Power Factor Correction equipment (PFC) can improve this close to 1 (0.99).\n\nA poor power factor means that your equipment and therefore site is drawing more power to compensate. It can cause more wear and tear on equipment, which in turn increases maintenance costs. If it’s frequently low, the energy supplier can apply a penalty, in the bill it’s called reactive power charges. "
    Subtitle2 = "\nVoltage Optimisation"
    text2 = "Voltage optimisation is needed to correct supply issues caused by the high voltage distribution infrastructure and meet supply and demand challenges. In the UK the average voltage is currently ~247 V. UK regulations require voltage to be provided between 215 V – 253 V however most assets designed for UK power offer peak energy performance between 220 V – 230 V.\n\n<<< On audited sites we observed 235 - 240 V, except for Beaconsfield’s main building supply at 247 V. >>>\n\nOvervoltage causes an increase in wasted current and subsequently energy to all inductive equipment (Motors/compressors/lighting/etc). In commercial & manufacturing this impacts ~70% - 90% of their electrical load. There are several areas where VO can demonstrate benefits:\n\n- kWh’s consumption eliminated ~ 4% pa (4% - 12% typical range)\n\n- Reducing voltage to design characteristics will imporve the lifespan of equipment\n\n- All Solid-State electronics which means nothing to go wrong (no moving parts)\n\nBy dropping the site voltage to <<< 230 V >>> we could see a reduction of <<< ~4% >>> of the site’s electrical usage. This reduction will vary depending on the types of power load on-site. "
    image_data1 = "G:\\.shortcut-targets-by-id\\1DDDepdM3lG41WX_pPjId0_Gdkc23PnIs\\Energy\\EMT\\Energy Projects\\Team\\1 - Team Members\\Analytics & Reporting Team\\Jack Berry\\Python\\Testing\\PythonCodeOrganised\\AutoReportResources\\ss2.png"
    SubtitleNew = "\nOn-site electricity generation"
    TextNew = "On-site power generation in the UK offers a range of benefits, which can be summarized as follows:\n\n1)	Energy Cost Savings\n\n     a)	Reduced Energy Bills: Generating power on-site can significantly lower electricity costs by reducing reliance on the grid.\n\n     b)	Price Stability: It provides protection against energy price volatility and increases in grid electricity prices.\n\n2)	Energy Security and Reliability\n\n     a)	Uninterrupted Power Supply: On-site generation can ensure a continuous power supply, reducing the risk of outages and improving business continuity.\n\n     b)	Reduced Transmission Losses: Proximity to the point of use minimizes transmission and distribution losses, improving overall efficiency.\n\n3)	Environmental Benefits\n\n     a)	Lower Carbon Emissions: Many on-site power generation methods, such as solar, wind, and biomass, produce lower emissions compared to conventional grid power.\n\n     b)	Promotion of Renewable Energy: Encourages the use of renewable energy sources, contributing to the UK's carbon reduction targets and sustainability goals.\n\n4)	Economic Advantages\n\n     a)	Job Creation: Installation and maintenance of on-site generation systems can create local jobs and stimulate economic activity. \n\n     b)	Return on Investment: Over time, the savings on energy costs and potential revenue from selling excess power can provide a significant return on investment.\n\n5)	Independence and Control\n\n     a)	Energy Independence: Reduces dependence on external energy suppliers and the national grid.\n\n     b)	Operational Control: Businesses and households have more control over their energy usage and production.\n\n6)	Grid Support and Decentralization\n\n     a)	Grid Relief: Reduces strain on the national grid, especially during peak demand times.\n\n     b)	Decentralized Energy System: Supports the transition to a more decentralized energy system, enhancing overall grid resilience.\n\n7)	Regulatory and Financial Incentives\n\n     a)	Government Incentives: Availability of subsidies, grants, and tax incentives for installing on-site power generation systems.\n\n     b)	Feed-in Tariffs and Export Payments: Potential earnings from exporting surplus energy back to the grid.\n\n8)	Technological Advancements\n\n     a)	Innovation and Efficiency: Encourages the adoption of advanced and efficient technologies, such as combined heat and power (CHP) systems, fuel cells, and battery storage solutions.\n\nIn summary, on-site power generation in the UK offers significant economic, environmental, and operational benefits, contributing to a more sustainable, resilient, and cost-effective energy landscape."
    Subtitle3 = "\nSolar PV"
    text3 = "Installing solar photovoltaic (PV) systems on sites offers multifaceted benefits. Firstly, it significantly reduces energy costs by generating electricity on-site, offsetting traditional grid consumption and minimising reliance on fossil fuels. This translates to long-term financial savings, enhancing the site's economic viability. Additionally, solar PV installations contribute to sustainability goals, reducing carbon emissions and environmental impact associated with conventional energy sources. \n\nBy leveraging underutilised space such as rooftops or open areas, sites can maximize resource efficiency and land use. Moreover, solar PV systems enhance energy independence and resilience, providing a reliable power source even during grid outages or disruptions. This strengthens operational continuity and mitigates risks associated with energy supply fluctuations. Overall, integrating solar PV into site operations aligns with businesses sustainability objectives, improves financial performance, and enhances operational resilience, establishing a more sustainable and competitive business model.\n\nWe have carried out an initial assessment based on satellite images to determine suitable roof space for solar panels. Further analysis will need to be completed to compare the daily profiles and refine the amount of solar that can be used on-site and how much will still need to be drawn from the grid. Detailed design by a solar specialist will be needed to optimise the design and minimise low-output panels due to placement."
    Subtitle4 = "\nWind turbine"
    text4 = "The viability of wind turbine projects is based on the average wind speed in the area and the best operating speeds varies on the size of the turbine. Further analysis will be required to look at the wind yield for specific sites however an indicative figure of expected output has been provided to illustrate the range of possibilities. In built-up areas, the wind speed drops considerably to about 2 m/s which is below the operating speed for most sizeable wind turbines and smaller turbines won’t generate enough to offset grid imports. See below a chart showing the power generated by a 10 kW wind turbine given a wind speed and a table with its estimated annual electricity output, for example. Other turbines have different profiles. "
    image_data2 = "G:\\.shortcut-targets-by-id\\1DDDepdM3lG41WX_pPjId0_Gdkc23PnIs\\Energy\\EMT\\Energy Projects\\Team\\1 - Team Members\\Analytics & Reporting Team\\Jack Berry\\Python\\Testing\\PythonCodeOrganised\\AutoReportResources\\ss3.png"
    text5 = "Should a site have an average of 8 m/s, we could see a <<< 4.7 >>> year payback at current rates. Given the time for deployment of such a project, electricity prices could fluctuate and therefore elongate the payback time. The next step would be to assess your estate for remote sites and review their average wind speeds with wind installers as a first pass if a 5+ year payback is acceptable."
    Subtitle5 = "Transformer upgrade"
    text6 = "Replacing old site electricity transformers with modern equivalents offers substantial benefits that profoundly impact a business's operations. Modern transformers are designed with advanced technologies to maximize energy efficiency, resulting in significant improvements in energy consumption. On average, upgrading from old transformers to modern equivalents can lead to energy efficiency improvements of up to 30%.\n\nThis enhanced energy efficiency translates to significant reductions in energy usage and associated costs for businesses. By replacing outdated transformers with modern equivalents, businesses can achieve substantial long-term cost savings, improving overall operational efficiency and competitiveness in the market.\n\nMoreover, the adoption of modern transformers aligns with sustainability goals by promoting energy-efficient technologies. Reduced energy consumption not only leads to cost savings but also contributes to improved carbon management practices. By minimising greenhouse gas emissions, businesses can enhance their environmental stewardship and regulatory compliance, positively impacting brand reputation and stakeholder perception.\n\nFurthermore, the investment in replacing old site electricity transformers with modern equivalents enhances operational performance by ensuring reliable and efficient electricity distribution. Modern transformers are designed to deliver consistent performance and reliability, minimising downtime and maximising productivity.\n\nIn summary, replacing old site electricity transformers with modern equivalents offers significant benefits for businesses, including energy savings, cost reduction, improved carbon management, and enhanced operational performance. By prioritising energy efficiency and modernisation, organisations can achieve greater sustainability, profitability, and competitiveness, positioning themselves for long-term success in the marketplace."
    Subtitle6 = "kVa Optimisation"
    text7 = "Optimising the use of kilovolt-amperes (kVA) on a manufacturing site offers significant benefits while avoiding potential issues with the grid and billing. Efficient kVA management ensures that electrical loads are balanced, preventing overloading and minimising demand charges. Exceeding kVA limits can lead to grid instability, penalties, and increased utility costs.\n\nTechnologies such as power factor correction (PFC) systems and energy storage solutions can improve kVA usage. PFC systems optimize the ratio of real power (kW) to apparent power (kVA), reducing reactive power demand and improving system efficiency. Energy storage solutions, such as batteries, can store excess energy during periods of low demand and discharge it during peak times, reducing kVA requirements and demand charges.\n\nEfficient kVA management positively impacts energy usage by optimising the distribution of electrical loads, reducing waste and improving overall efficiency. Cost reduction is achieved through lower utility bills, decreased demand charges, and improved system reliability. Additionally, by minimising grid stress and reactive power demand, businesses contribute to carbon management efforts, reducing greenhouse gas emissions and environmental impact.\n\nFurthermore, operational performance is enhanced as optimised kVA usage ensures stable and reliable electrical supply, minimising downtime and disruptions to manufacturing processes. By investing in technologies for kVA optimisation, businesses can achieve greater sustainability, profitability, and competitiveness, positioning themselves for long-term success in the marketplace."
    
    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText2 in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(text7)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText2 in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle6)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    
    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText2 in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(text6)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0
    
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText2 in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle5)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    
    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderText2 in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(text5)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0

    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(text4)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0        
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle4)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)         
    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(text3)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0         
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle3)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)  
    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(TextNew)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0 
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(SubtitleNew)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(text2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0 
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle2)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)        
    # TEXT
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(text1)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(10)
            new_paragraph.alignment = 0 
    # SUBTITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Subtitle1)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(12) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    # TITLE
    for index, paragraph in enumerate(doc.paragraphs):
        if placeholderTitle in paragraph.text:
            new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before(Title)
            run = new_paragraph.runs[0]
            run.font.name = 'Arial'  
            run.font.size = Pt(14) 
            run.font.bold = True
            run.font.color.rgb = RGBColor(184, 39, 74)
    for paragraph in doc.paragraphs:
        if placeholderTable2 in paragraph.text:
            table = doc.add_table(1, 2)
            cell = table.cell(0, 0)
            cell_paragraph = cell.paragraphs[0]
            run = cell_paragraph.add_run()
            run.add_picture(image_data1, width=Inches(3), height=Inches(2)) 
            cell = table.cell(0, 1)
            cell_paragraph = cell.paragraphs[0]
            run = cell_paragraph.add_run()
            run.add_picture(image_data2, width=Inches(3), height=Inches(2))  
            move_table_after(table, paragraph) 
            break

 
def convert_to_ico(input_path, output_path):
    img = Image.open(input_path)
    img.save(output_path)
    
def QuitFn():
    DelImages()
    root.destroy()
    sys.exit()
    
def QuitFn2():
    DelImages()
    root2.destroy()
    sys.exit()
    

    root2.mainloop()
def DateError():
    global root2
    root2 = tk.Tk()
    root2.title("Error")
    canvasB = tk.Canvas(root2, width=400, height=150, bg='White')
    canvasB.pack()
    label = tk.Label(root2, text="Date range inputted is not a full year.",bg="white")
    canvasB.create_window(200, 50, window=label)
    
    # TRY AGAIN BUTTON
    TryAgain = tk.Button(root2, text="Try again", command=root2.destroy)
    canvasB.create_window(50, 120, window=TryAgain)
    
    # QUIT BUTTON
    Quit = tk.Button(root2, text="Quit", command=QuitFn2)
    canvasB.create_window(350, 120, window=Quit)
    
    root2.mainloop()

def MatrixExample():
    root3 = tk.Toplevel(root)
    root3.title("Matrix example")
    canvasZ = tk.Canvas(root3, width=1040, height=690, bg='White')
    canvasZ.pack()
    image = Image.open("G:\\.shortcut-targets-by-id\\1DDDepdM3lG41WX_pPjId0_Gdkc23PnIs\\Energy\\EMT\\Energy Projects\\Team\\1 - Team Members\\Analytics & Reporting Team\\Jack Berry\\Python\\Testing\\PythonCodeOrganised\\AutoReportResources\\ss7.png")
    image = ImageTk.PhotoImage(image)
    canvasZ.create_image(520,345, image=image)
    
    root3.mainloop()


def MPANmultiError():
    global root2
    root2 = tk.Tk()
    root2.title("Error")
    canvasB = tk.Canvas(root2, width=400, height=150, bg='White')
    canvasB.pack()
    label = tk.Label(root2, text="Possible causes for error:\n- MPAN or MPRN not found in systemslink\n- Start and End date entered wrong way around",bg="white")
    canvasB.create_window(200, 50, window=label)
    
    # TRY AGAIN BUTTON
    TryAgain = tk.Button(root2, text="Try again", command=root2.destroy)
    canvasB.create_window(50, 120, window=TryAgain)
    
    # QUIT BUTTON
    Quit = tk.Button(root2, text="Quit", command=QuitFn2)
    canvasB.create_window(350, 120, window=Quit)
    
    root2.mainloop()

def MatrixError():
    global root2
    root2 = tk.Tk()
    root2.title("Error")
    canvasB = tk.Canvas(root2, width=400, height=150, bg='White')
    canvasB.pack()
    label = tk.Label(root2, text="'No scores available' checkbox must be ticked if matrix scores left blank",bg="white")
    canvasB.create_window(200, 50, window=label)
    
    # TRY AGAIN BUTTON
    TryAgain = tk.Button(root2, text="Try again", command=root2.destroy)
    canvasB.create_window(50, 120, window=TryAgain)
    
    # QUIT BUTTON
    Quit = tk.Button(root2, text="Quit", command=QuitFn2)
    canvasB.create_window(350, 120, window=Quit)
    
    root2.mainloop()

def UnknownError(error):
    global root2
    root2 = tk.Tk()
    root2.title("Error")
    canvasB = tk.Canvas(root2, width=400, height=150, bg='White')
    canvasB.pack()
    if str(error) == "name 'Elec' is not defined":
        label = tk.Label(root2, text="Please use quit button to close program",bg="white")
        canvasB.create_window(200, 50, window=label)
    else:
        label = tk.Label(root2, text="Unknown Error has occured:\n"+str(error),bg="white")
        canvasB.create_window(200, 50, window=label)
    
    # TRY AGAIN BUTTON
    TryAgain = tk.Button(root2, text="Try again", command=root2.destroy)
    canvasB.create_window(50, 120, window=TryAgain)
    
    # QUIT BUTTON
    Quit = tk.Button(root2, text="Quit", command=QuitFn2)
    canvasB.create_window(350, 120, window=Quit)
    
    root2.mainloop()

def QuitError():
    global root2
    root2 = tk.Tk()
    root2.title("Error")
    canvasB = tk.Canvas(root2, width=400, height=150, bg='White')
    canvasB.pack()
    label = tk.Label(root2, text="Please use 'Quit' button to close the program.",bg="white")
    canvasB.create_window(200, 50, window=label)
    
    # TRY AGAIN BUTTON
    TryAgain = tk.Button(root2, text="Try again", command=root2.destroy)
    canvasB.create_window(50, 120, window=TryAgain)
    
    # QUIT BUTTON
    Quit = tk.Button(root2, text="Quit", command=QuitFn2)
    canvasB.create_window(350, 120, window=Quit)
    
    root2.mainloop()

def StartAgain2():
    global StartAgainCheck
    StartAgainCheck = True
    root.destroy()

def score1fn(selected_option):
    global score1
    score1 = int(selected_option)
def score2fn(selected_option):
    global score2
    score2 = int(selected_option)
def score3fn(selected_option):
    global score3
    score3 = int(selected_option)
def score4fn(selected_option):
    global score4
    score4 = int(selected_option)
def score5fn(selected_option):
    global score5
    score5 = int(selected_option)
def score6fn(selected_option):
    global score6
    score6 = int(selected_option)
#%%
# WARNING SUPPRESION
warnings.filterwarnings("ignore")
warnings.filterwarnings("ignore", category=UserWarning)

#%%  GUI CREATION
repeat = True
while repeat == True:
    def DelImages():
        cd = os.getcwd()
        directory = cd
        
        imagelist =["MonthlyElectricityConsumption.png","MonthlyGasConsumption.png","EnergyIntensity.png","ElectricityVsProduction.png","GasVsProduction.png",
                    "GasVsHDD.png","GasVsCDD.png","ElectricityVsCDD.png","ElectricityVsHDD.png","Benchmarking.png","Baseload.png","Heatmap.png",
                    "Heatmap2.png"]
        
        for image in imagelist:
            delete_files_with_name(directory, image)
    TemplatePath = "G:\\.shortcut-targets-by-id\\1DDDepdM3lG41WX_pPjId0_Gdkc23PnIs\\Energy\\EMT\\Energy Projects\\Team\\1 - Team Members\\Analytics & Reporting Team\\Jack Berry\\Python\\Testing\\PythonCodeOrganised\\AutoReportResources\\Report_Template.docx"
    cd = os.getcwd()
    img_data = requests.get("https://www.fdf.org.uk/globalassets/images/company-logos/affiliates/businesswise-logo-1048x620.jpg").content
    with open(cd + "\\bwslogotest.png", 'wb') as handler:
        handler.write(img_data)
    
    image = Image.open(cd + "\\bwslogotest.png")
    
    # Crop the image
    cropped_image = image.crop((225, 225, 820, 400))
    cropped_image.save(cd + "\\bwslogotest.png")
    cropped_image2 = image.crop((247, 235, 400, 390))
    cropped_image2.save(cd + "\\bwslogotest2.png")
    convert_to_ico(cd + "\\bwslogotest2.png",cd + "\\bwsicontest.ico")
    
    
    
    TemplatePath = "G:\\.shortcut-targets-by-id\\1DDDepdM3lG41WX_pPjId0_Gdkc23PnIs\\Energy\\EMT\\Energy Projects\\Team\\1 - Team Members\\Analytics & Reporting Team\\Jack Berry\\Python\\Testing\\PythonCodeOrganised\\AutoReportResources\\Report_Template.docx"
    cd = os.getcwd()
    img_data = requests.get("https://www.fdf.org.uk/globalassets/images/company-logos/affiliates/businesswise-logo-1048x620.jpg").content
    with open(cd + "\\bwslogotest.png", 'wb') as handler:
        handler.write(img_data)
    
    image = Image.open(cd + "\\bwslogotest.png")
    
    # Crop the image
    cropped_image = image.crop((225, 225, 820, 400))
    cropped_image.save(cd + "\\bwslogotest.png")
    cropped_image2 = image.crop((247, 235, 400, 390))
    cropped_image2.save(cd + "\\bwslogotest2.png")
    convert_to_ico(cd + "\\bwslogotest2.png",cd + "\\bwsicontest.ico")
    
    
    root=tk.Tk()
    root.title("ESOS Report Creator")
    
    MPANCheck = False
    ElecExcelCheck = False
    MPRNCheck = False
    GasExcelCheck = False
    NoGasCheck = False
    ExcelImportCheck = False
    
    root.iconbitmap(cd + "\\bwsicontest.ico") 
    
    canvas1=tk.Canvas(root, width=1265, height=650, bg='#AEAEAE')
    canvas1.pack()
    
    # BOOLEAN VALUES CREATED BY TICKBOXES
    checkbox_var = tk.BooleanVar()
    checkbox_var1 = tk.BooleanVar()
    checkbox_var2 = tk.BooleanVar()
    checkbox_var3 = tk.BooleanVar()
    checkbox_var4 = tk.BooleanVar()
    checkbox_var5 = tk.BooleanVar()
    checkbox_var6 = tk.BooleanVar()
    checkbox_var7 = tk.BooleanVar()
    checkbox_var8 = tk.BooleanVar()
    checkbox_var9 = tk.BooleanVar()
    checkbox_var10 = tk.BooleanVar()
    checkbox_var11 = tk.BooleanVar()
    checkbox_var13 = tk.BooleanVar()
    checkbox_var14 = tk.BooleanVar()
    checkbox_var15 = tk.BooleanVar()
    checkbox_var16 = tk.BooleanVar()
    # MPRN CHECKBOX
    MPRNbool = tk.BooleanVar()
    MPRNsl = tk.BooleanVar()
    NoGasData = tk.BooleanVar()
    # ELEC CHECKBOX
    NoElecData = tk.BooleanVar()

    # NO MATRIX VALUES
    NoMatrixScores = tk.BooleanVar()
    
    # RECTANGLES
    
    canvas1.create_rectangle(20, 120, 365, 185, fill="black")  # EXCEL INPUT BACKGROUND
    canvas1.create_rectangle(20, 210, 365, 600, fill="black")  # GRAPH BACKGROUND
    canvas1.create_rectangle(395, 17, 775,600,  fill="black")  # MPRNS BACKGROUND
    canvas1.create_rectangle(805, 17, 995,600,  fill="black")  # MATRIX BACKGROUND
    
    
    # CHECK ALL
    select_all_var = tk.IntVar()
    select_all_checkbox = tk.Checkbutton(root, text="Select All", variable=select_all_var, command=select_all)
    canvas1.create_window(192, 570, window=select_all_checkbox)
        
    # LOGO
    image = Image.open("G:\\.shortcut-targets-by-id\\1DDDepdM3lG41WX_pPjId0_Gdkc23PnIs\\Energy\\EMT\\Energy Projects\\Team\\1 - Team Members\\Analytics & Reporting Team\\Jack Berry\\Python\\Testing\\PythonCodeOrganised\\AutoReportResources\\bwslogo_nobg.png")
    resized_image = image.resize((350, 110), Image.ANTIALIAS)
    resized_image = ImageTk.PhotoImage(resized_image)
    canvas1.create_image(14, 4,anchor="nw", image=resized_image)
    
    if os.path.exists(cd + "\\bwslogotest.png"):
        os.remove(cd + "\\bwslogotest.png")
    
    if os.path.exists(cd + "\\bwslogotest2.png"):
        os.remove(cd + "\\bwslogotest2.png")    
        
    if os.path.exists(cd + "\\bwsicontest.ico"):
            os.remove(cd + "\\bwsicontest.ico")
    
    
    
    
    # GUI LABELS
    label3 = tk.Label(root, text="Unselected", fg ="red")
    canvas1.create_window(192, 170, window=label3)
    label4 = tk.Label(root, text="2.  Graphs/Tables to be included in report:",bg="#B8274A",fg="white",font=('helvetica', 12, 'bold','underline'))
    canvas1.create_window(192, 230, window=label4)
    label5 = tk.Label(root, text="3.  Data Parameters",bg="#B8274A",fg="white",font=('helvetica', 12, 'bold','underline'))
    canvas1.create_window(585, 35, window=label5)
    
    # matrix example
    ShowMatrix = tk.Button(root, text="Matrix Preview", command=MatrixExample)
    canvas1.create_window(900, 627, window=ShowMatrix)
    
    # START DATE CALENDAR
    choose_date_button1 = tk.Button(root, text="Choose Start Date", command=choose_date1)
    canvas1.create_window(460, 65,anchor="nw", window=choose_date_button1)
    
    
    options = ["0", "1", "2", "3", "4"]  # List of options

    score1 = tk.StringVar(root)
    score1.set("Select an option")
    option_menu = tk.OptionMenu(root, score1, *options,command=score1fn)
    canvas1.create_window(900, 110,window=option_menu)

    
    score2 = tk.StringVar(root)
    score2.set("Select an option")
    option_menu = tk.OptionMenu(root, score2, *options,command=score2fn)
    canvas1.create_window(900, 180,window=option_menu)

    
    score3 = tk.StringVar(root)
    score3.set("Select an option")
    option_menu = tk.OptionMenu(root, score3, *options,command=score3fn)
    canvas1.create_window(900, 250,window=option_menu)

    
    score4 = tk.StringVar(root)
    score4.set("Select an option")
    option_menu = tk.OptionMenu(root, score4, *options,command=score4fn)
    canvas1.create_window(900, 320,window=option_menu)

    
    score5 = tk.StringVar(root)
    score5.set("Select an option")
    option_menu = tk.OptionMenu(root, score5, *options,command=score5fn)
    canvas1.create_window(900, 390,window=option_menu)


    score6 = tk.StringVar(root)
    score6.set("Select an option")
    option_menu = tk.OptionMenu(root, score6, *options,command=score6fn)
    canvas1.create_window(900, 460,window=option_menu)

    
    # MPAN
    MPANcheckbox = tk.Checkbutton(root, text="Electricity data in SystemsLink",command=MPANbox)
    canvas1.create_window(585, 155, window=MPANcheckbox)
    
    MPAN = tk.Label(root, text="MPAN(s) (seperate multiple MPANs by slashes)",bg="#B8274A",fg="white",font=('helvetica', 12))
    canvas1.create_window(585, 120, window=MPAN)
    
    entry3 = tk.Entry(root,state="disabled")
    canvas1.create_window(500, 173,anchor="nw", window=entry3)
    
    Enter3 = tk.Button(root, text="Enter", command=get_input3,state="disabled")
    canvas1.create_window(635, 170,anchor="nw", window=Enter3)
    
    NoElec = tk.Checkbutton(root, text="Electricity data in Excel input sheet", variable=NoElecData,command=noelec)
    canvas1.create_window(585, 275, window=NoElec)
    
    
    # MPRN
    MPRN = tk.Label(root, text="MPRN(s) (seperate multiple MPRNs by slashes)",bg="#B8274A",fg="white",font=('helvetica', 12))
    canvas1.create_window(585, 315, window=MPRN)
    
    entry4 = tk.Entry(root, state="disabled")
    canvas1.create_window(500, 368,anchor="nw", window=entry4)
    
    Enter4 = tk.Button(root, text="Enter", command=get_input4,state="disabled")
    canvas1.create_window(635, 365,anchor="nw", window=Enter4)
    
    MPRNcheckbox = tk.Checkbutton(root, text="Gas data in SystemsLink",variable = MPRNsl, command=MPRNbox)
    canvas1.create_window(585, 350, window=MPRNcheckbox)
    
    
    MPRNexcel = tk.Checkbutton(root, text="Gas data in Excel input sheet", variable=MPRNbool,command = gasexcel)
    canvas1.create_window(585, 485, window=MPRNexcel)
    
    NoGas = tk.Checkbutton(root, text="No gas data available", variable=NoGasData,command=nogas)
    canvas1.create_window(585, 520, window=NoGas)
    
    
    # IMPORT EXCEL FILE BUTTON
    browseButton_Excel=tk.Button(text='1.  Import Excel File', command=getExcel, bg='#B8274A', fg='white', font=('helvetica', 12, 'bold','underline'))
    canvas1.create_window(192, 140,window=browseButton_Excel)

    
    
    # ENERGY CONSUMPTION TICKBOX
    
    checkbox1 = tk.Checkbutton(root, text="Electricity Consumption", variable=checkbox_var)
    canvas1.create_window(30, 270,anchor="nw", window=checkbox1)
    
    
    # GAS CONSUMPTION TICKBOX
    
    checkbox2 = tk.Checkbutton(root, text="Gas Consumption", variable=checkbox_var2)
    canvas1.create_window(30, 300,anchor="nw", window=checkbox2)
    
    
    # INTENSITY TICKBOX
    
    checkbox3 = tk.Checkbutton(root, text="Energy Intensity + Production", variable=checkbox_var3)
    canvas1.create_window(30, 330,anchor="nw", window=checkbox3)
    
    
    # ELECTRICITY VS PRODUCTION TICKBOX
    
    checkbox4 = tk.Checkbutton(root, text="Electricity Vs Production", variable=checkbox_var4)
    canvas1.create_window(30, 360,anchor="nw", window=checkbox4)
    
        
    # GAS VS PRODUCTION TICKBOX
    
    checkbox5 = tk.Checkbutton(root, text="Gas Vs Production", variable=checkbox_var5)
    canvas1.create_window(30, 390,anchor="nw", window=checkbox5)
    
    
    # GAS VS HDD TICKBOX
    
    checkbox6 = tk.Checkbutton(root, text="Gas Vs HDD", variable=checkbox_var6)
    canvas1.create_window(30, 420,anchor="nw", window=checkbox6)
    
    
    # GAS VS CDD TICKBOX
    
    checkbox7 = tk.Checkbutton(root, text="Gas Vs CDD", variable=checkbox_var7)
    canvas1.create_window(30, 450,anchor="nw", window=checkbox7)
    
    
    # ELECTRICITY VS CDD TICKBOX
    
    checkbox8 = tk.Checkbutton(root, text="Electricity Vs CDD", variable=checkbox_var8)
    canvas1.create_window(230, 270,anchor="nw", window=checkbox8)
    
    
    # ELECTRICITY VS HDD TICKBOX
    
    checkbox9 = tk.Checkbutton(root, text="Electricity Vs HDD", variable=checkbox_var9)
    canvas1.create_window(230, 300,anchor="nw", window=checkbox9)
    
        
    # BENCHMARKING TICKBOX
    
    checkbox10 = tk.Checkbutton(root, text="Benchmarking", variable=checkbox_var10)
    canvas1.create_window(230, 330,anchor="nw", window=checkbox10)
    
    
    # BASELOADING TICKBOX
    
    checkbox11 = tk.Checkbutton(root, text="Baseloading", variable=checkbox_var11)
    canvas1.create_window(230, 360,anchor="nw", window=checkbox11)
    
    
    # WEEKLY HEATMAP TICKBOX
    
    checkbox13 = tk.Checkbutton(root, text="Heatmap (Weekly)", variable=checkbox_var13)
    canvas1.create_window(230, 390,anchor="nw", window=checkbox13)
    
    # TABLE 1/2
    
    checkbox15 = tk.Checkbutton(root, text="Scope 1/2/3 Table", variable=checkbox_var15)
    canvas1.create_window(230, 420,anchor="nw", window=checkbox15)
    
    
    # TABLE 3
    
    checkbox16 = tk.Checkbutton(root, text="EMaaS Table", variable=checkbox_var16)
    canvas1.create_window(230, 450,anchor="nw", window=checkbox16)
    
    checkboxes =[checkbox1,checkbox2,checkbox3,checkbox4,checkbox5,checkbox6,checkbox7,checkbox8,checkbox9,checkbox10,checkbox11,checkbox13,checkbox15,checkbox16]
    
    
    # LOAD DATA BUTTON
    LoadData = tk.Button(root, text='Load Data (may take up to a minute)',bg="#B8274A",fg="white",font=('helvetica', 12, 'bold'), command=update_label)
    canvas1.create_window(585, 570, window=LoadData)
    
    # MATRIX TITLE
    MatrixTitle = tk.Label(root, text="4.  Matrix scores (0-4)",bg="#B8274A",fg="white",font=('helvetica', 12, 'bold','underline'))
    canvas1.create_window(900, 35, window=MatrixTitle)
    
    # MATRIX INPUT LABELS
    EnergyPolicy1 = tk.Label(root, text="Energy Policy:",bg='#B8274A',fg="white")
    canvas1.create_window(900, 80,window=EnergyPolicy1)
    
    Organising = tk.Label(root, text="Organising:",bg='#B8274A',fg="white")
    canvas1.create_window(900, 150,window=Organising)
    Training = tk.Label(root, text="Training:",bg='#B8274A',fg="white")
    canvas1.create_window(900, 220,window=Training)
    PerformanceMeasurement = tk.Label(root, text="Performance Measurement:",bg='#B8274A',fg="white")
    canvas1.create_window(900, 290, window=PerformanceMeasurement)
    Communication = tk.Label(root, text="Communication:",bg='#B8274A',fg="white")
    canvas1.create_window(900, 360, window=Communication)
    Investment = tk.Label(root, text="Investment:",bg='#B8274A',fg="white")
    canvas1.create_window(900, 430,window=Investment)
    
    
    
    # IF NO MATRIX VALUES CHECKBOX
    NoMatrix = tk.Checkbutton(root, text="No scores available", variable=NoMatrixScores)
    canvas1.create_window(900, 570, window=NoMatrix)
    
    # CONTINUE BUTTON
    Subbutton=tk.Button(root, text='Submit', command=lambda: Submit(root), font=('helvetica', 12, 'bold'))
    Subbutton.config(state="disabled")
    canvas1.create_window(632, 627, window=Subbutton)
    
    StartAgainCheck = False
    # START AGAIN BUTTON
    StartAgain =tk.Button(root, text='Start again', command=StartAgain2, font=('helvetica', 12, 'bold'))
    canvas1.create_window(70, 627, window=StartAgain)
    
    
    # QUIT
    Quit =tk.Button(root, text='Quit', command=QuitFn, font=('helvetica', 12, 'bold'))
    canvas1.create_window(1230, 627, window=Quit)
    root.mainloop()
    
    if StartAgainCheck == True:
        continue
    current_dir = os. getcwd()
    InputPath = import_file_path
    AuditTemplatePath = TemplatePath
    
    doc = Document(AuditTemplatePath)
    rows = len(df_Tables["EMaaS Area"]) + 1
    df_Monthly = pd.DataFrame()
    
    Tickedboxes = []
    if checkbox_var.get() == True:
        Tickedboxes.append("ElecCons")
    if checkbox_var3.get() == True:
        Tickedboxes.append("Intensity")
    if checkbox_var4.get() == True:
        Tickedboxes.append("ElecVsProd")
    if checkbox_var6.get() == True:
        Tickedboxes.append("GasVsHDD")
    if checkbox_var8.get() == True:
        Tickedboxes.append("ElecVsCDD")
    if checkbox_var10.get() == True:
        Tickedboxes.append("Benchmarking")
    if checkbox_var11.get() == True:
        Tickedboxes.append("Baseloading")
    if checkbox_var13.get() == True:
        Tickedboxes.append("HeatmapWeekly")
    

    
    #%%
    
    
    Elec2 = pd.DataFrame()
    
    titles =["00:30","01:00","01:30","02:00","02:30","03:00","03:30","04:00","04:30","05:00","05:30","06:00","06:30","07:00","07:30","08:00","08:30",
              "09:00","09:30","10:00","10:30","11:00","11:30","12:00","12:30","13:00","13:30","14:00","14:30","15:00","15:30","16:00","16:30",
              "17:00","17:30","18:00","18:30","19:00","19:30","20:00","20:30","21:00","21:30","22:00","22:30","23:00","23:30","23:59"]
    
    if NoElecData.get() == True:
        df_Monthly["Month"] = df_Elec["date"].copy()
        df_Monthly["Monthly Electricity Usage (kWh)"] = df_Elec["value"].copy()
    
    
    if NoElecData.get() == False: 
    
        for i in range(48):
            values = Elec.loc[Elec['hh'] == (i+1), 'value'].tolist()
            Elec2[titles[i]] = values
        
        date_range = pd.date_range(start=StartDate, end=EndDate)
        dates = []
        for date in date_range:
            dates.append(date)
        
        for col in Elec2.columns:
            Elec2.rename(columns={col: pd.to_datetime(col)}, inplace=True)
        
        if len(dates) != len(Elec2):
            if len(dates) > len(Elec2):
                surplus = len(Elec2)-len(dates)
                dates = dates[:surplus]
                Elec2["DATE"] = dates
            if len(dates) < len(Elec2):
                surplus = len(dates) - len(Elec2)
                Elec2 = Elec2.drop(Elec2.index[surplus])
                Elec2["DATE"] = dates
        else:
            Elec2["DATE"] = dates
        
        Elec3 = Elec2.copy()
        #Elec2['DATE'] = pd.to_datetime(Elec2['DATE'])
        Elec3['day_of_week'] = Elec2['DATE'].dt.dayofweek
        day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        Elec3['day_of_week'] = Elec3['day_of_week'].apply(lambda x: day_names[x])
        avg_values = Elec3.groupby("day_of_week").mean()
        avg_values = avg_values.T
        avg_values = avg_values.drop(avg_values.index[-1])
        avg_values = avg_values.astype(np.float64)
        avg_values["Time"] = titles
        df_Baseload = avg_values.reset_index(drop=True)
        column_c = df_Baseload.pop('Time')  
        df_Baseload.insert(0, 'Time', column_c)
        ElecHHD["date"] = pd.to_datetime(ElecHHD["date"])
        ElecHHD = ElecHHD.sort_values(by='date')
        df_Monthly["Month"] = ElecHHD["date"]
        df_Monthly["Monthly Electricity Usage (kWh)"] = ElecHHD["value"]
    
    if MPRNsl.get() == True and NoGasData.get() == False and NoElecData.get() == False:
        Gas["date"] = pd.to_datetime(Gas["date"])
        Gas = Gas.sort_values(by='date')
        df_Monthly["Monthly Gas Usage (kWh)"] = Gas["value"]
        df_Monthly['Total Monthly Usage (kWh)'] = df_Monthly['Monthly Electricity Usage (kWh)'] + df_Monthly['Monthly Gas Usage (kWh)']
        df_Monthly['Energy Intensity (kWh/unit of production)'] = df_Monthly['Total Monthly Usage (kWh)'] / df_Production["Measurement of Production"]
        df_Monthly["Month"] = df_Monthly["Month"].dt.month
        df_Monthly["Month"] = df_Monthly["Month"].apply(lambda x: calendar.month_name[x])
        df_Monthly["Month"] = df_Monthly["Month"].apply(lambda x: x[:3])
        
    if MPRNbool.get() == True and NoGasData.get() == False and NoElecData.get() == False:
        df_Gas3 = df_Gas2["Gas Usage"].tolist()
        df_Monthly["Monthly Gas Usage (kWh)"] = df_Gas3
        df_Monthly['Total Monthly Usage (kWh)'] = df_Monthly['Monthly Electricity Usage (kWh)'] + df_Monthly['Monthly Gas Usage (kWh)']
        df_Monthly['Energy Intensity (kWh/unit of production)'] = df_Monthly['Total Monthly Usage (kWh)'] / df_Production["Measurement of Production"]
        df_Monthly["Month"] = df_Monthly["Month"].dt.month
        df_Monthly["Month"] = df_Monthly["Month"].apply(lambda x: calendar.month_name[x])
        df_Monthly["Month"] = df_Monthly["Month"].apply(lambda x: x[:3])
        
    # IF ELEC DATA IN EXCEL
    if MPRNsl.get() == True and NoGasData.get() == False and NoElecData.get() == True:
        Gas["date"] = pd.to_datetime(Gas["date"])
        Gas = Gas.sort_values(by='date')
        df_Monthly["Monthly Gas Usage (kWh)"] = Gas["value"]
        df_Monthly['Total Monthly Usage (kWh)'] = df_Elec["value"] + df_Monthly['Monthly Gas Usage (kWh)']
        df_Monthly['Energy Intensity (kWh/unit of production)'] = df_Monthly['Total Monthly Usage (kWh)'] / df_Production["Measurement of Production"]
    
        
    if MPRNbool.get() == True and NoGasData.get() == False and NoElecData.get() == True:
        df_Gas3 = df_Gas2["Gas Usage"].tolist()
        df_Monthly["Monthly Gas Usage (kWh)"] = df_Gas3
        df_Monthly['Total Monthly Usage (kWh)'] = df_Elec["value"] + df_Monthly['Monthly Gas Usage (kWh)']
        df_Monthly['Energy Intensity (kWh/unit of production)'] = df_Monthly['Total Monthly Usage (kWh)'] / df_Production["Measurement of Production"]
    
    
    #%%
    
    # ADDING MATRIX 
    
    if NoMatrixScores.get() == False:
        matrixph="{{matrix}}"
        for paragraph in doc.paragraphs:        
            if matrixph in paragraph.text:
                table = doc.add_table(6, 7)
                table.style='Table Grid'
                heading_cells=table.rows[0].cells
                heading_cells[0].text="Level"
                heading_cells[1].text='Energy Policy'
                heading_cells[2].text="Organising"
                heading_cells[3].text="Training"
                heading_cells[4].text="Performance Measurement"
                heading_cells[5].text="Communication"
                heading_cells[6].text="Investment"
                row1=table.rows[1]
                row1.cells[0].text='4'
                row1=table.rows[2]
                row1.cells[0].text='3'
                row1=table.rows[3]
                row1.cells[0].text='2'
                row1=table.rows[4]
                row1.cells[0].text='1'
                row1=table.rows[5]
                row1.cells[0].text='0'
                
                row1 = table.rows[1]
                row1.cells[1].text='Energy Policy, Action Plan and regular reviews have active commitment of top management'
                row1.cells[2].text="Fully integrated into senior management structure with clear accountability for energy consumption"
                row1.cells[3].text="Appropriate and comprehensive staff training tailored to identified needs, with evaluation"
                row1.cells[4].text="Comprehensive performance measurement against targets with effective management reporting"
                row1.cells[5].text="Extensive communication of energy issues within and outside of organisation"
                row1.cells[6].text="Resources routinely committed to energy efficiency in support of organisational objectives"
                
                row1 = table.rows[2]
                row1.cells[1].text='Formal policy but no active commitment from top management'
                row1.cells[2].text="Clear line management accountability for consumption and responsibility for improvement"
                row1.cells[3].text="Energy training targeted at major users following training needs analysis "
                row1.cells[4].text="Weekly performance measurement for each process, unit, or building"
                row1.cells[5].text="Regular staff briefings, performance reporting and energy promotion"
                row1.cells[6].text="Same appraisal criteria used for energy efficiency as for other cost reduction projects"
                
                row1 = table.rows[3]
                row1.cells[1].text='Un-adopted policy'
                row1.cells[2].text="Some delegation of responsibility but line management and authority unclear"
                row1.cells[3].text="Ad-hoc internal training for selected people as required"
                row1.cells[4].text="Monthly monitoring by fuel type"
                row1.cells[5].text="Some use of organisational communication mechanisms to promote energy efficiency"
                row1.cells[6].text="Low or medium cost measures considered if short payback period"
                
                row1 = table.rows[4]
                row1.cells[1].text='An unwritten set of guidelines'
                row1.cells[2].text="Informal, mostly focused on energy supply"
                row1.cells[3].text="Technical staff occasionally attend specialist courses"
                row1.cells[4].text="Invoice checking only"
                row1.cells[5].text="Ad-hoc informal contacts used to promote energy efficiency"
                row1.cells[6].text="Only low or no cost measures taken"
                
                row1 = table.rows[5]
                row1.cells[1].text='No explicit energy policy'
                row1.cells[2].text="No delegation of responsibility for managing energy"
                row1.cells[3].text="No energy related staff training provided"
                row1.cells[4].text="No measurement of energy costs or consumptions"
                row1.cells[5].text="No communication or promotion of energy issues"
                row1.cells[6].text="No investment in improving energy efficiency"
                
                for col in table.columns:
                    for cell in col.cells:
                            cell.paragraphs[0].style = 'Centred Style'
                cell = table.cell(0,0)
                cell.paragraphs[0].style = "TableHeader"
                cell = table.cell(0,1)
                cell.paragraphs[0].style = "TableHeader"
                cell = table.cell(0,2)
                cell.paragraphs[0].style = "TableHeader"
                cell = table.cell(0,3)
                cell.paragraphs[0].style = "TableHeader"
                cell = table.cell(0,4)
                cell.paragraphs[0].style = "TableHeader"
                cell = table.cell(0,5)
                cell.paragraphs[0].style = "TableHeader"
                cell = table.cell(0,6)
                cell.paragraphs[0].style = "TableHeader"         
                
                # Cell shading
                shading_elm_1 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[0]._tc.get_or_add_tcPr().append(shading_elm_1)
                shading_elm_2 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[1]._tc.get_or_add_tcPr().append(shading_elm_2)
                shading_elm_3 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[2]._tc.get_or_add_tcPr().append(shading_elm_3)
                shading_elm_4 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[3]._tc.get_or_add_tcPr().append(shading_elm_4)
                shading_elm_5 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[4]._tc.get_or_add_tcPr().append(shading_elm_5)
                shading_elm_6 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[5]._tc.get_or_add_tcPr().append(shading_elm_6)
                shading_elm_7 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[6]._tc.get_or_add_tcPr().append(shading_elm_7)
                shading_elm_8 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[1].cells[0]._tc.get_or_add_tcPr().append(shading_elm_8)
                shading_elm_9 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[2].cells[0]._tc.get_or_add_tcPr().append(shading_elm_9)
                shading_elm_10 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[3].cells[0]._tc.get_or_add_tcPr().append(shading_elm_10)
                shading_elm_11 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[4].cells[0]._tc.get_or_add_tcPr().append(shading_elm_11)
                shading_elm_12 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[5].cells[0]._tc.get_or_add_tcPr().append(shading_elm_12)
                move_table_after(table, paragraph)
                break
            
        if score1 == 0:
            shading_elm_13 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[5].cells[1]._tc.get_or_add_tcPr().append(shading_elm_13)
        elif score1 == 1:
            shading_elm_14 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[4].cells[1]._tc.get_or_add_tcPr().append(shading_elm_14)
        elif score1 == 2:
            shading_elm_15 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[3].cells[1]._tc.get_or_add_tcPr().append(shading_elm_15)
        elif score1 == 3:
            shading_elm_16 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[2].cells[1]._tc.get_or_add_tcPr().append(shading_elm_16)
        elif score1 == 4:
            shading_elm_17 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[1].cells[1]._tc.get_or_add_tcPr().append(shading_elm_17)
        else:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc1" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("[Placeholder text]")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                    new_paragraph.alignment = 0
                
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc2" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("[Placeholder text]")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                    new_paragraph.alignment = 0

                    
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc3" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("[Placeholder text]")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                    new_paragraph.alignment = 0

                    
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc4" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("[Placeholder text]")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                    new_paragraph.alignment = 0
 
                    
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc5" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("[Placeholder text]")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                    new_paragraph.alignment = 0

                    
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc6" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("[Placeholder text]")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                    new_paragraph.alignment = 0

        
        if score2 == 0:
            shading_elm_18 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[5].cells[2]._tc.get_or_add_tcPr().append(shading_elm_18)
        elif score2 == 1:
            shading_elm_19 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[4].cells[2]._tc.get_or_add_tcPr().append(shading_elm_19)
        elif score2 == 2:
            shading_elm_20 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[3].cells[2]._tc.get_or_add_tcPr().append(shading_elm_20)
        elif score2 == 3:
            shading_elm_21 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[2].cells[2]._tc.get_or_add_tcPr().append(shading_elm_21)
        elif score2 == 4:
            shading_elm_22 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[1].cells[2]._tc.get_or_add_tcPr().append(shading_elm_22)
        
        if score3 == 0:
            shading_elm_23 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[5].cells[3]._tc.get_or_add_tcPr().append(shading_elm_23)
        elif score3 == 1:
            shading_elm_24 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[4].cells[3]._tc.get_or_add_tcPr().append(shading_elm_24)
        elif score3 == 2:
            shading_elm_25 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[3].cells[3]._tc.get_or_add_tcPr().append(shading_elm_25)
        elif score3 == 3:
            shading_elm_26 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[2].cells[3]._tc.get_or_add_tcPr().append(shading_elm_26)
        elif score3 == 4:
            shading_elm_27 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[1].cells[3]._tc.get_or_add_tcPr().append(shading_elm_27)
            
        if score4 == 0:
            shading_elm_28 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[5].cells[4]._tc.get_or_add_tcPr().append(shading_elm_28)
        elif score4 == 1:
            shading_elm_29 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[4].cells[4]._tc.get_or_add_tcPr().append(shading_elm_29)
        elif score4 == 2:
            shading_elm_30 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[3].cells[4]._tc.get_or_add_tcPr().append(shading_elm_30)
        elif score4 == 3:
            shading_elm_31 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[2].cells[4]._tc.get_or_add_tcPr().append(shading_elm_31)
        elif score4 == 4:
            shading_elm_32 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[1].cells[4]._tc.get_or_add_tcPr().append(shading_elm_32)
        
        if score5 == 0:
            shading_elm_33 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[5].cells[5]._tc.get_or_add_tcPr().append(shading_elm_33)
        elif score5 == 1:
            shading_elm_34 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[4].cells[5]._tc.get_or_add_tcPr().append(shading_elm_34)
        elif score5 == 2:
            shading_elm_35 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[3].cells[5]._tc.get_or_add_tcPr().append(shading_elm_35)
        elif score5 == 3:
            shading_elm_36 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[2].cells[5]._tc.get_or_add_tcPr().append(shading_elm_36)
        elif score5 == 4:
            shading_elm_37 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[1].cells[5]._tc.get_or_add_tcPr().append(shading_elm_37)
        
        if score6 == 0:
            shading_elm_38 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[5].cells[6]._tc.get_or_add_tcPr().append(shading_elm_38)
        elif score6 == 1:
            shading_elm_39 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[4].cells[6]._tc.get_or_add_tcPr().append(shading_elm_39)
        elif score6 == 2:
            shading_elm_40 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[3].cells[6]._tc.get_or_add_tcPr().append(shading_elm_40)
        elif score6 == 3:
            shading_elm_41 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[2].cells[6]._tc.get_or_add_tcPr().append(shading_elm_41)
        elif score6 == 4:
            shading_elm_42 = parse_xml(r'<w:shd {} w:fill="F4B084"/>'.format(nsdecls('w')))
            table.rows[1].cells[6]._tc.get_or_add_tcPr().append(shading_elm_42)
        
        if score1 == 0:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc1" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("ep0")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score1 == 1:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc1" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("ep1")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score1 == 2:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc1" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("ep2")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score1 == 3:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc1" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("ep3")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score1 == 4:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc1" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("ep4")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc1" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("Energy Policy")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10) 
                run.font.bold = True
        if score2 == 0:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc2" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("o0")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score2 == 1:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc2" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("o1")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score2 == 2:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc2" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("o2")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score2 == 3:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc2" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("o3")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score2 == 4:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc2" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("o4")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc2" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("Organising")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10) 
                run.font.bold = True
        if score3 == 0:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc3" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("t0")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score3 == 1:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc3" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("t1")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score3 == 2:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc3" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("t2")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score3 == 3:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc3" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("t3")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score3 == 4:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc3" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("t4")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc3" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("Training")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10) 
                run.font.bold = True
        if score4 == 0:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc4" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("pm0")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score4 == 1:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc4" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("pm1")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score4 == 2:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc4" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("pm2")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score4 == 3:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc4" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("pm3")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score4 == 4:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc4" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("pm4")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc4" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("Performance Measurement")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10) 
                run.font.bold = True
        if score5 == 0:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc5" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("c0")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score5 == 1:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc5" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("c1")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score5 == 2:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc5" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("c2")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score5 == 3:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc5" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("c3")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score5 == 4:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc5" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("c4")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc5" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("Communication")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10) 
                run.font.bold = True
        if score6 == 0:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc6" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("i0")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score6 == 1:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc6" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("i1")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score6 == 2:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc6" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("i2")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score6 == 3:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc6" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("i3")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        elif score6 == 4:
            for index, paragraph in enumerate(doc.paragraphs):
                if "{{desc6" in paragraph.text:
                    new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("i4")
                    run = new_paragraph.runs[0]
                    run.font.name = 'Arial'  
                    run.font.size = Pt(10)
                    new_paragraph.alignment = 0
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc6" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("Investment")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10) 
                run.font.bold = True
    if NoMatrixScores.get() == True:
        matrixph="{{matrix}}"
        for paragraph in doc.paragraphs:        
            if matrixph in paragraph.text:
                table = doc.add_table(6, 7)
                table.style='Table Grid'
                heading_cells=table.rows[0].cells
                heading_cells[0].text="Level"
                heading_cells[1].text='Energy Policy'
                heading_cells[2].text="Organising"
                heading_cells[3].text="Training"
                heading_cells[4].text="Performance Measurement"
                heading_cells[5].text="Communication"
                heading_cells[6].text="Investment"
                row1=table.rows[1]
                row1.cells[0].text='4'
                row1=table.rows[2]
                row1.cells[0].text='3'
                row1=table.rows[3]
                row1.cells[0].text='2'
                row1=table.rows[4]
                row1.cells[0].text='1'
                row1=table.rows[5]
                row1.cells[0].text='0'
                
                row1 = table.rows[1]
                row1.cells[1].text='Energy Policy, Action Plan and regular reviews have active commitment of top management'
                row1.cells[2].text="Fully integrated into senior management structure with clear accountability for energy consumption"
                row1.cells[3].text="Appropriate and comprehensive staff training tailored to identified needs, with evaluation"
                row1.cells[4].text="Comprehensive performance measurement against targets with effective management reporting"
                row1.cells[5].text="Extensive communication of energy issues within and outside of organisation"
                row1.cells[6].text="Resources routinely committed to energy efficiency in support of organisational objectives"
                
                row1 = table.rows[2]
                row1.cells[1].text='Formal policy but no active commitment from top management'
                row1.cells[2].text="Clear line management accountability for consumption and responsibility for improvement"
                row1.cells[3].text="Energy training targeted at major users following training needs analysis "
                row1.cells[4].text="Weekly performance measurement for each process, unit, or building"
                row1.cells[5].text="Regular staff briefings, performance reporting and energy promotion"
                row1.cells[6].text="Same appraisal criteria used for energy efficiency as for other cost reduction projects"
                
                row1 = table.rows[3]
                row1.cells[1].text='Un-adopted policy'
                row1.cells[2].text="Some delegation of responsibility but line management and authority unclear"
                row1.cells[3].text="Ad-hoc internal training for selected people as required"
                row1.cells[4].text="Monthly monitoring by fuel type"
                row1.cells[5].text="Some use of organisational communication mechanisms to promote energy efficiency"
                row1.cells[6].text="Low or medium cost measures considered if short payback period"
                
                row1 = table.rows[4]
                row1.cells[1].text='An unwritten set of guidelines'
                row1.cells[2].text="Informal, mostly focused on energy supply"
                row1.cells[3].text="Technical staff occasionally attend specialist courses"
                row1.cells[4].text="Invoice checking only"
                row1.cells[5].text="Ad-hoc informal contacts used to promote energy efficiency"
                row1.cells[6].text="Only low or no cost measures taken"
                
                row1 = table.rows[5]
                row1.cells[1].text='No explicit energy policy'
                row1.cells[2].text="No delegation of responsibility for managing energy"
                row1.cells[3].text="No energy related staff training provided"
                row1.cells[4].text="No measurement of energy costs or consumptions"
                row1.cells[5].text="No communication or promotion of energy issues"
                row1.cells[6].text="No investment in improving energy efficiency"
                
                for col in table.columns:
                    for cell in col.cells:
                            cell.paragraphs[0].style = 'Centred Style'
                cell = table.cell(0,0)
                cell.paragraphs[0].style = "TableHeader"
                cell = table.cell(0,1)
                cell.paragraphs[0].style = "TableHeader"
                cell = table.cell(0,2)
                cell.paragraphs[0].style = "TableHeader"
                cell = table.cell(0,3)
                cell.paragraphs[0].style = "TableHeader"
                cell = table.cell(0,4)
                cell.paragraphs[0].style = "TableHeader"
                cell = table.cell(0,5)
                cell.paragraphs[0].style = "TableHeader"
                cell = table.cell(0,6)
                cell.paragraphs[0].style = "TableHeader"         
                
                # Cell shading
                shading_elm_1 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[0]._tc.get_or_add_tcPr().append(shading_elm_1)
                shading_elm_2 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[1]._tc.get_or_add_tcPr().append(shading_elm_2)
                shading_elm_3 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[2]._tc.get_or_add_tcPr().append(shading_elm_3)
                shading_elm_4 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[3]._tc.get_or_add_tcPr().append(shading_elm_4)
                shading_elm_5 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[4]._tc.get_or_add_tcPr().append(shading_elm_5)
                shading_elm_6 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[5]._tc.get_or_add_tcPr().append(shading_elm_6)
                shading_elm_7 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[0].cells[6]._tc.get_or_add_tcPr().append(shading_elm_7)
                shading_elm_8 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[1].cells[0]._tc.get_or_add_tcPr().append(shading_elm_8)
                shading_elm_9 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[2].cells[0]._tc.get_or_add_tcPr().append(shading_elm_9)
                shading_elm_10 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[3].cells[0]._tc.get_or_add_tcPr().append(shading_elm_10)
                shading_elm_11 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[4].cells[0]._tc.get_or_add_tcPr().append(shading_elm_11)
                shading_elm_12 = parse_xml(r'<w:shd {} w:fill="E07A97"/>'.format(nsdecls('w')))
                table.rows[5].cells[0]._tc.get_or_add_tcPr().append(shading_elm_12)
                move_table_after(table, paragraph)
                break
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc1" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("[Placeholder text]")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10)
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                new_paragraph.alignment = 0
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc1" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("Energy Policy")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10) 
                run.font.bold = True
            
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc2" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("[Placeholder text]")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10)
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                new_paragraph.alignment = 0
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc2" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("Organising")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10) 
                run.font.bold = True
                
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc3" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("[Placeholder text]")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10)
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                new_paragraph.alignment = 0
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc3" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("Training")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10) 
                run.font.bold = True
                
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc4" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("[Placeholder text]")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10)
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                new_paragraph.alignment = 0
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc4" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("Performance Measurement")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10) 
                run.font.bold = True
                
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc5" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("[Placeholder text]")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10)
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                new_paragraph.alignment = 0
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc5" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("Communication")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10) 
                run.font.bold = True
                
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc6" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("[Placeholder text]")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10)
                run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                new_paragraph.alignment = 0
        for index, paragraph in enumerate(doc.paragraphs):
            if "{{desc6" in paragraph.text:
                new_paragraph = doc.paragraphs[index + 1].insert_paragraph_before("Investment")
                run = new_paragraph.runs[0]
                run.font.name = 'Arial'  
                run.font.size = Pt(10) 
                run.font.bold = True
        
    #%%
    # IF CHAIN BASED OFF TICKED BOX RESPONSE

    for index, graph in enumerate(Tickedboxes):
        if graph == "ElecCons":
            ElecCons(index)
        elif graph == "Intensity":
            Intensity(index)
        elif graph == "ElecVsProd":
            ElecVsProd(index)
        elif graph == "GasVsHDD":
            GasHDD(index)
        elif graph == "ElecVsCDD":
            ElecCDD(index)
        elif graph == "Benchmarking":
            Benchmarking(index)
        elif graph == "Baseloading":
            Baseloading(index)
        elif graph == "HeatmapWeekly":
            HeatmapWeekly(index)
    
        
    if checkbox_var15.get() == True:
        table3()
    else:
        placeholder = "{{ table3 }}"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                break  
    
    if checkbox_var16.get() == True:
        table12()
    else:
        placeholder = "{{ table1 }}"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                break 
        placeholder = "{{ table2 }}"
        for paragraph in doc.paragraphs:
            if placeholder in paragraph.text:
                paragraph.clear()
                break
    for index, project in enumerate(selectedProjects):
        if project == "Staff Training & Awareness":
            StaffTraining(index)
        elif project == "Optimising of compressed air":
            CompressedAir(index)
        elif project == "ISO 50001 Energy":
            ISO(index)
        elif project == "Heat Decarbonisation":
            HeatDecarbonisation(index)
        elif project == "Energy Policy & Energy management SOPs":
            EnergyPolicyfn(index)
        elif project == "Energy monitoring and targeting":
            EnergyMonitoring(index)
        elif project == "HVAC controls":
            HVAC(index)
        elif project == "Gas Boiler Phase Out for hot water":
            GasBoilerHotWater(index)
        elif project == "Lighting management":
            Lighting(index)
        elif project == "Power quality":
            PowerQuality(index)
        elif project == "Boiler Plant":
            BoilerPlant(index)
        elif project == "Electric Motors":
            ElectricMotors(index)
    repeat = False



    


#%%
replace_text(doc,"{{footnote}}","") 
limit = [1,2,3,4,5,6,7,8,9,10,11,12,13] # CURRENT LIMIT ON PROJECTS = 7 
limit2 = [1,2,3,4,5,6,7,8,9,10,11,12,13]
limit3 = [1,2,3,4,5,6,7,8,9,10,11,12,13]
limit4 = [1,2,3]
limit5 = [1,2,3,4,5,6,7]
for i in limit:
    title = "{{title" + str(i) + "}}"
    text = "{{text" + str(i) + "}}"
    table = "{{table" + str(i) + "}}"
    replace_text(doc,title,"")
    replace_text(doc,text,"")
    replace_text(doc,table,"")
for i in limit:
    title = "{{Text" + str(i)+ "}}"
    replace_text(doc,title,"")    
for i in limit:
    title = "{{Table" + str(i)+ "}}"
    replace_text(doc,title,"") 
for i in limit2:
    title = "{{ image" + str(i)+ " }}"
    replace_text(doc,title,"")
for i in limit3:
    title = "{{ text" + str(i)+ " }}"
    replace_text(doc,title,"")
for i in limit4:
    title = "{{ table" + str(i)+ " }}"
    replace_text(doc,title,"")

replace_text(doc,"{{matrix}}","")
replace_text(doc,"{{desc1","")
replace_text(doc,"{{desc2","")
replace_text(doc,"{{desc3","")
replace_text(doc,"{{desc4","")
replace_text(doc,"{{desc5","")
replace_text(doc,"{{desc6","")

fullname = getpass.getuser()
fullname = fullname.replace("."," ")
firstname, lastname = fullname.split()
firstname = firstname.capitalize()
lastname = lastname.capitalize()
fullname = firstname + " " + lastname


from datetime import datetime
current_date = datetime.now().date()


current_date_string = current_date.strftime('%Y-%m-%d')




placeholder = "{{name}}"
for paragraph in doc.paragraphs:
    if placeholder in paragraph.text:
        paragraph.clear()
        run = paragraph.add_run(fullname)
        paragraph = doc.add_paragraph()
        font = run.font
        font.name = 'Open Sans'  
        font.size = Pt(16)
        break



placeholder = "{{date}}"
for paragraph in doc.paragraphs:
    if placeholder in paragraph.text:
        paragraph.clear()
        run = paragraph.add_run(current_date_string)
        paragraph = doc.add_paragraph()
        font = run.font
        font.name = 'Open Sans'  
        font.size = Pt(16)
        break


#%%
VersionStamp = "v7"

filename = filename + "\\" + user_input +"-"+VersionStamp+"-"+current_date_string+ ".docx"
doc.save(filename)


#%%  DELETED IMAGE FILES USED
DelImages()

#%%

#Test Window














































